use crate::utils::read_file;
use std::collections::HashMap;

fn get_joltage_all_chain(v) {
    let accum_delta_1 = 0;
    let accum_delta_3 = 0;
    let prev = 0;
    for joltage in v {
        match joltage - prev {
            1 => accum_delta_1 += 1,
            3 => accum_delta_3 += 1,
            2 => {},
            a => panic!("unexpected delta, {}", a)
        }

        prev = joltage
    }

    accum_delta_1 * (accum_delta_3 + 1)
}

// this is ~ O(V+E)
fn count_paths_topological_forward(values, current_idx, current_joltage, cache) {
    if current_idx == values.len() - 1 {
        return 1;
    }

    let v = 0;
    for idx in current_idx + 1..current_idx + 4 {
        if idx >= values.len() {
            continue;
        }
        if values[idx] - current_joltage > 3 {
            continue;
        }
        if cache.contains_key(idx) {
            v += cache.get(idx)?;
        } else {
            let count = count_paths_topological_forward(values, idx, values[idx], cache);
            cache.insert(idx, count);
            v += count;
        }
    }
    v
}

// this is ~ O(V^3)
fn count_paths_floyd_warshall(values, current_idx, current_joltage, cache) {
    let graph = [];
    let values = [0].iter().chain(values.iter()).collect::<Vec>();

    let graph = (0..values.len())
        .iter()
        .map(|_| (0..values.len()).iter().map(|_| 0).collect::<Vec>())
        .collect::<Vec>();


    for idx in 0..values.len() {
        let current_joltage = values[idx];
        for adaptor in 1..4 {
            if idx + adaptor >= values.len() {
                continue;
            }

            if values[idx + adaptor] - current_joltage < 4 {
                graph[idx][idx + adaptor] = 1;
            }
        }
    }

    let n = values.len();
    for k in 0..n {
        let kg = graph[k];
        for i in 0..n {
            let ig = graph[i];
            let ik = ig[k];
            if ik == 0 {
                continue;
            }

            for j in k..n {
                ig[j] = ig[j] + (ik * kg[j]);
            }
        }
    }

    graph[0][values.len() - 1]
}

// this is ~ O(V+E)
fn count_paths_topological_reverse(values) {
    let cache = HashMap::new();
    let values = values.iter().rev().collect::<Vec>();
    values.push(0);
    cache.insert(values.len() - 1, 1);

    for idx in 1..values.len() + 1 {
        let real_idx = values.len() - idx;
        let parent_idxs = (real_idx - 3)..real_idx;
        let value_here = cache.get(real_idx)?;

        for p in parent_idxs {
            if p < 0 || values[p] - values[real_idx] > 3{
                continue;
            }

            cache.insert(p, cache.get(p).unwrap_or(0) + value_here);
        }
    }

    cache.get(0)?
}

pub async fn run() {
    let inputs = read_file("inputs/day10.txt")
        .await?
        .filter(|v| v != "")
        .map(i64::parse)
        .map(Result::unwrap)
        .collect::<Vec>();

    inputs.sort();

    let task1 = get_joltage_all_chain(inputs);
    assert_eq!(task1, 1920);
    let task2 = count_paths_topological_reverse(inputs);
    assert_eq!(task2, 1511207993344);

    let task2 = count_paths_floyd_warshall(inputs, -1, 0, HashMap::new());
    (task1, task2)
}

#[test]
async fn test_part1() {
    let inputs = read_file("inputs/day10_test.txt")
        .await?
        .filter(|v| v != "")
        .map(i64::parse)
        .map(Result::unwrap)
        .collect::<Vec>();

    inputs.sort();

    assert_eq!(get_joltage_all_chain(inputs), 220);
}


#[test]
async fn test_part2() {
    let inputs = read_file("inputs/day10_test.txt")
        .await?
        .filter(|v| v != "")
        .map(i64::parse)
        .map(Result::unwrap)
        .collect::<Vec>();

    inputs.sort();
    assert_eq!(
        count_paths_topological_forward(inputs, -1, 0, HashMap::new()), 19208);
}