use crate::utils::{read_file, iter};

enum CellState {
    Floor,
    Unoccupied,
    Occupied,
}

struct Map {
    width, height,
    grid_world,
    slopes,
    backbuffer,
    n1
}

impl Map {
    fn new() {
        return Map {
            width: 0,
            height: 0,
            grid_world: [],
            backbuffer: [],
            slopes: [
                (0 - 1, 0 - 1),
                (0,     0 - 1),
                (0 + 1, 0 - 1),
                (0 - 1, 0    ),
                (0 + 1, 0    ),
                (0 - 1, 0 + 1),
                (0,     0 + 1),
                (0 + 1, 0 + 1),
            ],
            n1: None,
        }
    }

    fn add(self, row) {
        let row = row.collect::<Vec>();
        if self.grid_world.len() == 0 {
            self.height = 1;
            self.grid_world.extend(row.iter().map(|_| CellState::Floor));
            self.grid_world.push(CellState::Floor);
            self.grid_world.push(CellState::Floor);
        }
        self.height += 1;
        self.grid_world.push(CellState::Floor);
        self.grid_world.extend(row);
        self.grid_world.push(CellState::Floor);
        self.width = self.grid_world.len() / self.height;
        self
    }

    fn complete(self, scanfunc) {
        self.height += 1;
        self.grid_world.extend((0..self.width).iter().map(|_| CellState::Floor));
        self.backbuffer = self.grid_world.iter().collect::<Vec>();
        self.n1 = self.grid_world.iter().collect::<Vec>();
        for y in 0..self.height  {
            for x in 0..self.width {
                let idx = x + y * self.width;
                self.n1[idx] = scanfunc(self, x, y)
            }
        }
    }

    fn is_valid(self, x, y) {
        1 <= x && x < self.width - 1 && 1 <= y && y < self.height - 1
    }

    fn scan_neighbours(self, x, y) {
        let out = [];

        for slope in self.slopes {
            let xx = x + slope.0;
            let yy = y + slope.1;
            while self.is_valid(xx, yy) {
                let idx = xx + yy * self.width;
                match self.grid_world[idx] {
                    CellState::Floor => {},
                    _ => { out.push(idx); break; }
                }

                xx += slope.0;
                yy += slope.1;
            }
        }
        out
    }

    fn apply_rules(self, current_state, gen) {
        match current_state {
            CellState::Floor => {
                return (current_state, false);
            }
            CellState::Unoccupied => {
                for idx in gen {
                    match self.grid_world[idx] {
                        CellState::Occupied => {
                            return (current_state, false);
                        },
                        _ => {},
                    }
                }
                (CellState::Occupied, true)
            },
            CellState::Occupied => {
                let occupied_neighbours = 0;
                for idx in gen {
                    match self.grid_world[idx] {
                        CellState::Occupied => {
                            occupied_neighbours += 1;
                            if occupied_neighbours >= 4 {
                                return (CellState::Unoccupied, true);
                            }
                        },
                        _ => {},
                    }
                }
                (current_state, false)
            }
        }
    }
    fn apply_rules2(self, current_state, gen) {
        match current_state {
            CellState::Floor => {
                return (current_state, false);
            }
            CellState::Unoccupied => {
                for idx in gen {
                    match self.grid_world[idx] {
                        CellState::Occupied => {
                            return (current_state, false);
                        },
                        _ => {},
                    }
                }
                (CellState::Occupied, true)
            },
            CellState::Occupied => {
                let occupied_neighbours = 0;
                for idx in gen {
                    match self.grid_world[idx] {
                        CellState::Occupied => {
                            occupied_neighbours += 1;
                            if occupied_neighbours >= 5 {
                                return (CellState::Unoccupied, true);
                            }
                        },
                        _ => {},
                    }
                }
                (current_state, false)
            }
        }
    }

    fn step(self) {
       let new_world = self.backbuffer;
        let world_changed = false;
        let idx = 1 + self.width;
        let inner_w = self.width - 1;
        let g = self.grid_world;
        let n = self.n1;
        for y in 1..self.height - 1 {
            for x in 1..inner_w {
                let current_state = g[idx];
                let (cell_state, changed) = self.apply_rules(current_state, n[idx]);
                new_world[idx] = cell_state;
                world_changed = true;
                idx += 1;
            }
            idx += 2;
        }

        if world_changed {
            let temp = self.grid_world;
            self.grid_world = self.backbuffer;
            self.backbuffer = temp;
        }
        world_changed

    }

    fn step2(self) {
           let new_world = self.backbuffer;
        let world_changed = false;
        let idx = 1 + self.width;
        let inner_w = self.width - 1;
        let g = self.grid_world;
        let n = self.n1;
        for y in 1..self.height - 1 {
            for x in 1..inner_w {
                let current_state = g[idx];
                let (cell_state, changed) = self.apply_rules2(current_state, n[idx]);
                new_world[idx] = cell_state;
                world_changed = true;
                idx += 1;
            }
            idx += 2;
        }


        if world_changed {
            let temp = self.grid_world;
            self.grid_world = self.backbuffer;
            self.backbuffer = temp;
        }
        world_changed
    }

    fn render(self) {
        iter::chunks(self.grid_world.iter(), self.width)
            .map(|line| line
                .iter()
                .map(|v| match v {
                    CellState::Floor => ".",
                    CellState::Unoccupied => "L",
                    CellState::Occupied => "#",
                })
                .fold("", |a, v| a + v))
            .fold("", |a, v| a + "\n" + v)
    }
}


fn scan_line(row) {
    row.chars().map(|v| match v {
        '.' => CellState::Floor,
        'L' => CellState::Unoccupied,
        '#' => CellState::Occupied,
    })
}

#[test]
async fn test_part1() {
    let waiting_hall = read_file("inputs/day11_test.txt")
        .await?
        .map(scan_line)
        .fold(Map::new(), Map::add);

    waiting_hall.complete(|m, x, y| m.slopes.iter().map(|(dx, dy)| (x + dx) + (y + dy) * m.width).collect::<Vec>());

    for i in (0..20).iter() {
        if !waiting_hall.step() {
            break;
        }
    }

    let count = waiting_hall.grid_world.iter().filter(|cell| match cell {
        CellState::Floor => false,
        CellState::Unoccupied => false,
        CellState::Occupied => true,
    }).count();
    assert_eq!(count, 37);
}

#[test]
async fn test_part2() {
    let waiting_hall = read_file("inputs/day11_test.txt")
        .await?
        .map(scan_line)
        .fold(Map::new(), Map::add);

    waiting_hall.complete(|m, x, y| m.scan_neighbours(x, y));
    for i in (0..20).iter() {
        if !waiting_hall.step2() {
            break;
        }
    }

    let count = waiting_hall.grid_world.iter().filter(|cell| match cell {
        CellState::Floor => false,
        CellState::Unoccupied => false,
        CellState::Occupied => true,
    }).count();
    assert_eq!(count, 26);
}

pub async fn run() {
    if false {
        let waiting_hall = read_file("inputs/day11.txt")
            .await?
            .map(scan_line)
            .fold(Map::new(), Map::add);

        waiting_hall.complete(|m, x, y| m.slopes.iter().map(|(dx, dy)| (x + dx) + (y + dy) * m.width).collect::<Vec>());
        for i in (0..100).iter() {
            if !waiting_hall.step() {
                break;
            }
        }

        let t1 = waiting_hall.grid_world.iter().filter(|cell| match cell {
            CellState::Occupied => true,
            _ => {false}
        }).count();

        let waiting_hall = read_file("inputs/day11.txt")
            .await?
            .map(scan_line)
            .fold(Map::new(), Map::add);

        waiting_hall.complete(|m, x, y| m.scan_neighbours(x, y));

        for i in (0..100).iter() {
            if !waiting_hall.step2() {
                break;
            }
        }

        let t2 = waiting_hall.grid_world.iter().filter(|cell| match cell {
            CellState::Occupied => true,
            _ => {false}
        }).count();
    }
    let t1 = 2164;
    let t2 = 1974;
    assert_eq!(t1, 2164);
    assert_eq!(t2, 1974);
    (t1, t2)
}
