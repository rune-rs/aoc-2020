<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (535 samples, 0.29%)</title><rect x="0.0900%" y="709" width="0.2882%" height="15" fill="rgb(227,0,7)"/><text x="0.3400%" y="719.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,O,P)&gt;&gt;::fn_call (341 samples, 0.18%)</title><rect x="0.3830%" y="693" width="0.1837%" height="15" fill="rgb(217,0,24)"/><text x="0.6330%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (757 samples, 0.41%)</title><rect x="0.3782%" y="709" width="0.4078%" height="15" fill="rgb(221,193,54)"/><text x="0.6282%" y="719.50"></text></g><g><title>[aoc-2020-rune] (539 samples, 0.29%)</title><rect x="0.7860%" y="709" width="0.2904%" height="15" fill="rgb(248,212,6)"/><text x="1.0360%" y="719.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,P)&gt;&gt;::fn_call (201 samples, 0.11%)</title><rect x="1.4287%" y="693" width="0.1083%" height="15" fill="rgb(208,68,35)"/><text x="1.6787%" y="703.50"></text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (317 samples, 0.17%)</title><rect x="1.8537%" y="693" width="0.1708%" height="15" fill="rgb(232,128,0)"/><text x="2.1037%" y="703.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (2,446 samples, 1.32%)</title><rect x="2.0245%" y="693" width="1.3177%" height="15" fill="rgb(207,160,47)"/><text x="2.2745%" y="703.50"></text></g><g><title>__GI___libc_free (316 samples, 0.17%)</title><rect x="3.3466%" y="693" width="0.1702%" height="15" fill="rgb(228,23,34)"/><text x="3.5966%" y="703.50"></text></g><g><title>runestick::vm_execution::VmExecution::run (234 samples, 0.13%)</title><rect x="3.8244%" y="165" width="0.1261%" height="15" fill="rgb(218,30,26)"/><text x="4.0744%" y="175.50"></text></g><g><title>runestick::vm::Vm::run (233 samples, 0.13%)</title><rect x="3.8249%" y="149" width="0.1255%" height="15" fill="rgb(220,122,19)"/><text x="4.0749%" y="159.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,)&gt;&gt;::fn_call (418 samples, 0.23%)</title><rect x="3.7264%" y="373" width="0.2252%" height="15" fill="rgb(250,228,42)"/><text x="3.9764%" y="383.50"></text></g><g><title>core::ops::function::Fn::call (418 samples, 0.23%)</title><rect x="3.7264%" y="357" width="0.2252%" height="15" fill="rgb(240,193,28)"/><text x="3.9764%" y="367.50"></text></g><g><title>runestick::modules::iter::collect_vec (344 samples, 0.19%)</title><rect x="3.7662%" y="341" width="0.1853%" height="15" fill="rgb(216,20,37)"/><text x="4.0162%" y="351.50"></text></g><g><title>runestick::iterator::Iterator::collect (344 samples, 0.19%)</title><rect x="3.7662%" y="325" width="0.1853%" height="15" fill="rgb(206,188,39)"/><text x="4.0162%" y="335.50"></text></g><g><title>runestick::iterator::Iterator::next (344 samples, 0.19%)</title><rect x="3.7662%" y="309" width="0.1853%" height="15" fill="rgb(217,207,13)"/><text x="4.0162%" y="319.50"></text></g><g><title>&lt;runestick::iterator::IterRepr as runestick::iterator::RuneIterator&gt;::next (344 samples, 0.19%)</title><rect x="3.7662%" y="293" width="0.1853%" height="15" fill="rgb(231,73,38)"/><text x="4.0162%" y="303.50"></text></g><g><title>&lt;runestick::iterator::Map&lt;I&gt; as runestick::iterator::RuneIterator&gt;::next (343 samples, 0.18%)</title><rect x="3.7668%" y="277" width="0.1848%" height="15" fill="rgb(225,20,46)"/><text x="4.0168%" y="287.50"></text></g><g><title>runestick::function::FunctionImpl&lt;V&gt;::call (336 samples, 0.18%)</title><rect x="3.7705%" y="261" width="0.1810%" height="15" fill="rgb(210,31,41)"/><text x="4.0205%" y="271.50"></text></g><g><title>runestick::function::FnOffset::call (336 samples, 0.18%)</title><rect x="3.7705%" y="245" width="0.1810%" height="15" fill="rgb(221,200,47)"/><text x="4.0205%" y="255.50"></text></g><g><title>runestick::call::Call::call_with_vm (336 samples, 0.18%)</title><rect x="3.7705%" y="229" width="0.1810%" height="15" fill="rgb(226,26,5)"/><text x="4.0205%" y="239.50"></text></g><g><title>runestick::vm::Vm::complete (336 samples, 0.18%)</title><rect x="3.7705%" y="213" width="0.1810%" height="15" fill="rgb(249,33,26)"/><text x="4.0205%" y="223.50"></text></g><g><title>runestick::vm_execution::VmExecution::complete (326 samples, 0.18%)</title><rect x="3.7759%" y="197" width="0.1756%" height="15" fill="rgb(235,183,28)"/><text x="4.0259%" y="207.50"></text></g><g><title>runestick::vm_execution::VmExecution::resume (326 samples, 0.18%)</title><rect x="3.7759%" y="181" width="0.1756%" height="15" fill="rgb(221,5,38)"/><text x="4.0259%" y="191.50"></text></g><g><title>aoc_2020_rune::ScriptEngine::run_day (450 samples, 0.24%)</title><rect x="3.7258%" y="693" width="0.2424%" height="15" fill="rgb(247,18,42)"/><text x="3.9758%" y="703.50"></text></g><g><title>tokio::runtime::Runtime::block_on (450 samples, 0.24%)</title><rect x="3.7258%" y="677" width="0.2424%" height="15" fill="rgb(241,131,45)"/><text x="3.9758%" y="687.50"></text></g><g><title>tokio::runtime::handle::Handle::enter (450 samples, 0.24%)</title><rect x="3.7258%" y="661" width="0.2424%" height="15" fill="rgb(249,31,29)"/><text x="3.9758%" y="671.50"></text></g><g><title>tokio::runtime::context::enter (450 samples, 0.24%)</title><rect x="3.7258%" y="645" width="0.2424%" height="15" fill="rgb(225,111,53)"/><text x="3.9758%" y="655.50"></text></g><g><title>tokio::runtime::Runtime::block_on::_{{closure}} (450 samples, 0.24%)</title><rect x="3.7258%" y="629" width="0.2424%" height="15" fill="rgb(238,160,17)"/><text x="3.9758%" y="639.50"></text></g><g><title>tokio::runtime::shell::Shell::block_on (450 samples, 0.24%)</title><rect x="3.7258%" y="613" width="0.2424%" height="15" fill="rgb(214,148,48)"/><text x="3.9758%" y="623.50"></text></g><g><title>tokio::coop::budget (450 samples, 0.24%)</title><rect x="3.7258%" y="597" width="0.2424%" height="15" fill="rgb(232,36,49)"/><text x="3.9758%" y="607.50"></text></g><g><title>tokio::coop::with_budget (450 samples, 0.24%)</title><rect x="3.7258%" y="581" width="0.2424%" height="15" fill="rgb(209,103,24)"/><text x="3.9758%" y="591.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (450 samples, 0.24%)</title><rect x="3.7258%" y="565" width="0.2424%" height="15" fill="rgb(229,88,8)"/><text x="3.9758%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (450 samples, 0.24%)</title><rect x="3.7258%" y="549" width="0.2424%" height="15" fill="rgb(213,181,19)"/><text x="3.9758%" y="559.50"></text></g><g><title>tokio::coop::with_budget::_{{closure}} (450 samples, 0.24%)</title><rect x="3.7258%" y="533" width="0.2424%" height="15" fill="rgb(254,191,54)"/><text x="3.9758%" y="543.50"></text></g><g><title>tokio::runtime::shell::Shell::block_on::_{{closure}} (450 samples, 0.24%)</title><rect x="3.7258%" y="517" width="0.2424%" height="15" fill="rgb(241,83,37)"/><text x="3.9758%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (450 samples, 0.24%)</title><rect x="3.7258%" y="501" width="0.2424%" height="15" fill="rgb(233,36,39)"/><text x="3.9758%" y="511.50"></text></g><g><title>runestick::vm_execution::VmExecution::async_complete::_{{closure}} (450 samples, 0.24%)</title><rect x="3.7258%" y="485" width="0.2424%" height="15" fill="rgb(226,3,54)"/><text x="3.9758%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (450 samples, 0.24%)</title><rect x="3.7258%" y="469" width="0.2424%" height="15" fill="rgb(245,192,40)"/><text x="3.9758%" y="479.50"></text></g><g><title>runestick::vm_execution::VmExecution::async_resume::_{{closure}} (450 samples, 0.24%)</title><rect x="3.7258%" y="453" width="0.2424%" height="15" fill="rgb(238,167,29)"/><text x="3.9758%" y="463.50"></text></g><g><title>runestick::vm_execution::VmExecution::run (450 samples, 0.24%)</title><rect x="3.7258%" y="437" width="0.2424%" height="15" fill="rgb(232,182,51)"/><text x="3.9758%" y="447.50"></text></g><g><title>runestick::vm::Vm::run (450 samples, 0.24%)</title><rect x="3.7258%" y="421" width="0.2424%" height="15" fill="rgb(231,60,39)"/><text x="3.9758%" y="431.50"></text></g><g><title>runestick::vm::Vm::op_call_instance (449 samples, 0.24%)</title><rect x="3.7264%" y="405" width="0.2419%" height="15" fill="rgb(208,69,12)"/><text x="3.9764%" y="415.50"></text></g><g><title>runestick::vm::Vm::inner_op_call_instance (449 samples, 0.24%)</title><rect x="3.7264%" y="389" width="0.2419%" height="15" fill="rgb(235,93,37)"/><text x="3.9764%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (4,741 samples, 2.55%)</title><rect x="22.8133%" y="373" width="2.5541%" height="15" fill="rgb(213,116,39)"/><text x="23.0633%" y="383.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (2,328 samples, 1.25%)</title><rect x="25.3717%" y="373" width="1.2541%" height="15" fill="rgb(222,207,29)"/><text x="25.6217%" y="383.50"></text></g><g><title>log::max_level (1,002 samples, 0.54%)</title><rect x="26.6259%" y="373" width="0.5398%" height="15" fill="rgb(206,96,30)"/><text x="26.8759%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,002 samples, 0.54%)</title><rect x="26.6259%" y="357" width="0.5398%" height="15" fill="rgb(218,138,4)"/><text x="26.8759%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1,002 samples, 0.54%)</title><rect x="26.6259%" y="341" width="0.5398%" height="15" fill="rgb(250,191,14)"/><text x="26.8759%" y="351.50"></text></g><g><title>runestick::budget::BUDGET::__getit (1,436 samples, 0.77%)</title><rect x="27.7577%" y="325" width="0.7736%" height="15" fill="rgb(239,60,40)"/><text x="28.0077%" y="335.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1,436 samples, 0.77%)</title><rect x="27.7577%" y="309" width="0.7736%" height="15" fill="rgb(206,27,48)"/><text x="28.0077%" y="319.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1,184 samples, 0.64%)</title><rect x="27.8935%" y="293" width="0.6378%" height="15" fill="rgb(225,35,8)"/><text x="28.1435%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1,184 samples, 0.64%)</title><rect x="27.8935%" y="277" width="0.6378%" height="15" fill="rgb(250,213,24)"/><text x="28.1435%" y="287.50"></text></g><g><title>runestick::budget::take (4,262 samples, 2.30%)</title><rect x="27.1657%" y="373" width="2.2960%" height="15" fill="rgb(247,123,22)"/><text x="27.4157%" y="383.50">r..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,262 samples, 2.30%)</title><rect x="27.1657%" y="357" width="2.2960%" height="15" fill="rgb(231,138,38)"/><text x="27.4157%" y="367.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,262 samples, 2.30%)</title><rect x="27.1657%" y="341" width="2.2960%" height="15" fill="rgb(231,145,46)"/><text x="27.4157%" y="351.50">s..</text></g><g><title>runestick::budget::take::_{{closure}} (1,727 samples, 0.93%)</title><rect x="28.5313%" y="325" width="0.9304%" height="15" fill="rgb(251,118,11)"/><text x="28.7813%" y="335.50"></text></g><g><title>runestick::unit::Unit::instruction_at (4,484 samples, 2.42%)</title><rect x="29.4617%" y="373" width="2.4156%" height="15" fill="rgb(217,147,25)"/><text x="29.7117%" y="383.50">ru..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4,484 samples, 2.42%)</title><rect x="29.4617%" y="357" width="2.4156%" height="15" fill="rgb(247,81,37)"/><text x="29.7117%" y="367.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4,484 samples, 2.42%)</title><rect x="29.4617%" y="341" width="2.4156%" height="15" fill="rgb(209,12,38)"/><text x="29.7117%" y="351.50">&lt;u..</text></g><g><title>runestick::vm::Vm::advance (1,491 samples, 0.80%)</title><rect x="31.8773%" y="373" width="0.8032%" height="15" fill="rgb(227,1,9)"/><text x="32.1273%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (359 samples, 0.19%)</title><rect x="33.7645%" y="341" width="0.1934%" height="15" fill="rgb(248,47,43)"/><text x="34.0145%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (358 samples, 0.19%)</title><rect x="33.7650%" y="325" width="0.1929%" height="15" fill="rgb(221,10,30)"/><text x="34.0150%" y="335.50"></text></g><g><title>runestick::vm::Vm::op_assign (2,901 samples, 1.56%)</title><rect x="32.6806%" y="373" width="1.5628%" height="15" fill="rgb(210,229,1)"/><text x="32.9306%" y="383.50"></text></g><g><title>runestick::vm::Vm::internal_num_assign (2,570 samples, 1.38%)</title><rect x="32.8589%" y="357" width="1.3845%" height="15" fill="rgb(222,148,37)"/><text x="33.1089%" y="367.50"></text></g><g><title>runestick::stack::Stack::pop (375 samples, 0.20%)</title><rect x="34.0414%" y="341" width="0.2020%" height="15" fill="rgb(234,67,33)"/><text x="34.2914%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (232 samples, 0.12%)</title><rect x="34.1184%" y="325" width="0.1250%" height="15" fill="rgb(247,98,35)"/><text x="34.3684%" y="335.50"></text></g><g><title>runestick::vm::Vm::op_call (224 samples, 0.12%)</title><rect x="34.2434%" y="373" width="0.1207%" height="15" fill="rgb(247,138,52)"/><text x="34.4934%" y="383.50"></text></g><g><title>&lt;&amp;mut runestick::iterator::Iterator as runestick::from_value::UnsafeFromValue&gt;::from_value (241 samples, 0.13%)</title><rect x="35.0634%" y="325" width="0.1298%" height="15" fill="rgb(213,79,30)"/><text x="35.3134%" y="335.50"></text></g><g><title>__GI___libc_malloc (246 samples, 0.13%)</title><rect x="35.2433%" y="197" width="0.1325%" height="15" fill="rgb(246,177,23)"/><text x="35.4933%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,runestick::vm_error::VmError&gt; as runestick::to_value::ToValue&gt;::to_value (386 samples, 0.21%)</title><rect x="35.2088%" y="325" width="0.2079%" height="15" fill="rgb(230,62,27)"/><text x="35.4588%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as runestick::to_value::ToValue&gt;::to_value (376 samples, 0.20%)</title><rect x="35.2142%" y="309" width="0.2026%" height="15" fill="rgb(216,154,8)"/><text x="35.4642%" y="319.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::new (357 samples, 0.19%)</title><rect x="35.2244%" y="293" width="0.1923%" height="15" fill="rgb(244,35,45)"/><text x="35.4744%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (353 samples, 0.19%)</title><rect x="35.2266%" y="277" width="0.1902%" height="15" fill="rgb(251,115,12)"/><text x="35.4766%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (332 samples, 0.18%)</title><rect x="35.2379%" y="261" width="0.1789%" height="15" fill="rgb(240,54,50)"/><text x="35.4879%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (332 samples, 0.18%)</title><rect x="35.2379%" y="245" width="0.1789%" height="15" fill="rgb(233,84,52)"/><text x="35.4879%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (332 samples, 0.18%)</title><rect x="35.2379%" y="229" width="0.1789%" height="15" fill="rgb(207,117,47)"/><text x="35.4879%" y="239.50"></text></g><g><title>alloc::alloc::alloc (332 samples, 0.18%)</title><rect x="35.2379%" y="213" width="0.1789%" height="15" fill="rgb(249,43,39)"/><text x="35.4879%" y="223.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 0.12%)</title><rect x="35.7588%" y="261" width="0.1223%" height="15" fill="rgb(209,38,44)"/><text x="36.0088%" y="271.50"></text></g><g><title>&lt;runestick::value::Value as runestick::to_value::ToValue&gt;::to_value (237 samples, 0.13%)</title><rect x="35.8811%" y="261" width="0.1277%" height="15" fill="rgb(236,212,23)"/><text x="36.1311%" y="271.50"></text></g><g><title>core::ops::function::Fn::call (1,038 samples, 0.56%)</title><rect x="35.4954%" y="325" width="0.5592%" height="15" fill="rgb(242,79,21)"/><text x="35.7454%" y="335.50"></text></g><g><title>runestick::iterator::Iterator::next (1,038 samples, 0.56%)</title><rect x="35.4954%" y="309" width="0.5592%" height="15" fill="rgb(211,96,35)"/><text x="35.7454%" y="319.50"></text></g><g><title>&lt;runestick::iterator::IterRepr as runestick::iterator::RuneIterator&gt;::next (1,038 samples, 0.56%)</title><rect x="35.4954%" y="293" width="0.5592%" height="15" fill="rgb(253,215,40)"/><text x="35.7454%" y="303.50"></text></g><g><title>&lt;T as runestick::iterator::IteratorTrait&gt;::next (735 samples, 0.40%)</title><rect x="35.6586%" y="277" width="0.3960%" height="15" fill="rgb(211,81,21)"/><text x="35.9086%" y="287.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,)&gt;&gt;::fn_call (3,402 samples, 1.83%)</title><rect x="34.5823%" y="341" width="1.8327%" height="15" fill="rgb(208,190,38)"/><text x="34.8323%" y="351.50">&lt;..</text></g><g><title>runestick::stack::Stack::push (480 samples, 0.26%)</title><rect x="36.1564%" y="325" width="0.2586%" height="15" fill="rgb(235,213,38)"/><text x="36.4064%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (457 samples, 0.25%)</title><rect x="36.1688%" y="309" width="0.2462%" height="15" fill="rgb(237,122,38)"/><text x="36.4188%" y="319.50"></text></g><g><title>core::ptr::write (428 samples, 0.23%)</title><rect x="36.1844%" y="293" width="0.2306%" height="15" fill="rgb(244,218,35)"/><text x="36.4344%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (394 samples, 0.21%)</title><rect x="36.4150%" y="341" width="0.2123%" height="15" fill="rgb(240,68,47)"/><text x="36.6650%" y="351.50"></text></g><g><title>runestick::runtime_context::RuntimeContext::lookup (436 samples, 0.23%)</title><rect x="36.6752%" y="341" width="0.2349%" height="15" fill="rgb(210,16,53)"/><text x="36.9252%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (436 samples, 0.23%)</title><rect x="36.6752%" y="325" width="0.2349%" height="15" fill="rgb(235,124,12)"/><text x="36.9252%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (383 samples, 0.21%)</title><rect x="36.7038%" y="309" width="0.2063%" height="15" fill="rgb(224,169,11)"/><text x="36.9538%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (283 samples, 0.15%)</title><rect x="36.7576%" y="293" width="0.1525%" height="15" fill="rgb(250,166,2)"/><text x="37.0076%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (283 samples, 0.15%)</title><rect x="36.7576%" y="277" width="0.1525%" height="15" fill="rgb(242,216,29)"/><text x="37.0076%" y="287.50"></text></g><g><title>runestick::vm::Vm::op_call_fn (4,978 samples, 2.68%)</title><rect x="34.3641%" y="373" width="2.6818%" height="15" fill="rgb(230,116,27)"/><text x="34.6141%" y="383.50">ru..</text></g><g><title>runestick::vm::Vm::op_call (4,675 samples, 2.52%)</title><rect x="34.5273%" y="357" width="2.5185%" height="15" fill="rgb(228,99,48)"/><text x="34.7773%" y="367.50">ru..</text></g><g><title>runestick::unit::Unit::lookup (252 samples, 0.14%)</title><rect x="36.9101%" y="341" width="0.1358%" height="15" fill="rgb(253,11,6)"/><text x="37.1601%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (252 samples, 0.14%)</title><rect x="36.9101%" y="325" width="0.1358%" height="15" fill="rgb(247,143,39)"/><text x="37.1601%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (252 samples, 0.14%)</title><rect x="36.9101%" y="309" width="0.1358%" height="15" fill="rgb(236,97,10)"/><text x="37.1601%" y="319.50"></text></g><g><title>runestick::modules::iter::collect_vec (231 samples, 0.12%)</title><rect x="37.4046%" y="309" width="0.1244%" height="15" fill="rgb(233,208,19)"/><text x="37.6546%" y="319.50"></text></g><g><title>runestick::iterator::Iterator::collect (231 samples, 0.12%)</title><rect x="37.4046%" y="293" width="0.1244%" height="15" fill="rgb(216,164,2)"/><text x="37.6546%" y="303.50"></text></g><g><title>runestick::iterator::Iterator::next (208 samples, 0.11%)</title><rect x="37.4170%" y="277" width="0.1121%" height="15" fill="rgb(220,129,5)"/><text x="37.6670%" y="287.50"></text></g><g><title>&lt;runestick::iterator::IterRepr as runestick::iterator::RuneIterator&gt;::next (207 samples, 0.11%)</title><rect x="37.4176%" y="261" width="0.1115%" height="15" fill="rgb(242,17,10)"/><text x="37.6676%" y="271.50"></text></g><g><title>&lt;runestick::iterator::Map&lt;I&gt; as runestick::iterator::RuneIterator&gt;::next (199 samples, 0.11%)</title><rect x="37.4219%" y="245" width="0.1072%" height="15" fill="rgb(242,107,0)"/><text x="37.6719%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (290 samples, 0.16%)</title><rect x="37.5474%" y="181" width="0.1562%" height="15" fill="rgb(251,28,31)"/><text x="37.7974%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (290 samples, 0.16%)</title><rect x="37.5474%" y="165" width="0.1562%" height="15" fill="rgb(233,223,10)"/><text x="37.7974%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (290 samples, 0.16%)</title><rect x="37.5474%" y="149" width="0.1562%" height="15" fill="rgb(215,21,27)"/><text x="37.7974%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (289 samples, 0.16%)</title><rect x="37.5479%" y="133" width="0.1557%" height="15" fill="rgb(232,23,21)"/><text x="37.7979%" y="143.50"></text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (275 samples, 0.15%)</title><rect x="37.5555%" y="117" width="0.1481%" height="15" fill="rgb(244,5,23)"/><text x="37.8055%" y="127.50"></text></g><g><title>core::ops::function::FnMut::call_mut (231 samples, 0.12%)</title><rect x="37.5792%" y="101" width="0.1244%" height="15" fill="rgb(226,81,46)"/><text x="37.8292%" y="111.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (223 samples, 0.12%)</title><rect x="37.5835%" y="85" width="0.1201%" height="15" fill="rgb(247,70,30)"/><text x="37.8335%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (296 samples, 0.16%)</title><rect x="37.5458%" y="213" width="0.1595%" height="15" fill="rgb(212,68,19)"/><text x="37.7958%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (296 samples, 0.16%)</title><rect x="37.5458%" y="197" width="0.1595%" height="15" fill="rgb(240,187,13)"/><text x="37.7958%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (299 samples, 0.16%)</title><rect x="37.5458%" y="229" width="0.1611%" height="15" fill="rgb(223,113,26)"/><text x="37.7958%" y="239.50"></text></g><g><title>&lt;runestick::vec::Vec as core::clone::Clone&gt;::clone (424 samples, 0.23%)</title><rect x="37.5302%" y="293" width="0.2284%" height="15" fill="rgb(206,192,2)"/><text x="37.7802%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (424 samples, 0.23%)</title><rect x="37.5302%" y="277" width="0.2284%" height="15" fill="rgb(241,108,4)"/><text x="37.7802%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (395 samples, 0.21%)</title><rect x="37.5458%" y="261" width="0.2128%" height="15" fill="rgb(247,173,49)"/><text x="37.7958%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (395 samples, 0.21%)</title><rect x="37.5458%" y="245" width="0.2128%" height="15" fill="rgb(224,114,35)"/><text x="37.7958%" y="255.50"></text></g><g><title>core::ops::function::Fn::call (970 samples, 0.52%)</title><rect x="37.2834%" y="325" width="0.5226%" height="15" fill="rgb(245,159,27)"/><text x="37.5334%" y="335.50"></text></g><g><title>runestick::vec::Vec::into_iterator (513 samples, 0.28%)</title><rect x="37.5296%" y="309" width="0.2764%" height="15" fill="rgb(245,172,44)"/><text x="37.7796%" y="319.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,)&gt;&gt;::fn_call (1,427 samples, 0.77%)</title><rect x="37.1417%" y="341" width="0.7688%" height="15" fill="rgb(236,23,11)"/><text x="37.3917%" y="351.50"></text></g><g><title>&lt;&amp;runestick::modules::collections::HashMap as runestick::from_value::UnsafeFromValue&gt;::from_value (462 samples, 0.25%)</title><rect x="38.3485%" y="325" width="0.2489%" height="15" fill="rgb(205,117,38)"/><text x="38.5985%" y="335.50"></text></g><g><title>runestick::value::Value::into_any_ptr (415 samples, 0.22%)</title><rect x="38.3738%" y="309" width="0.2236%" height="15" fill="rgb(237,72,25)"/><text x="38.6238%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as runestick::from_value::FromValue&gt;::from_value (398 samples, 0.21%)</title><rect x="38.6486%" y="309" width="0.2144%" height="15" fill="rgb(244,70,9)"/><text x="38.8986%" y="319.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::take (281 samples, 0.15%)</title><rect x="38.7116%" y="293" width="0.1514%" height="15" fill="rgb(217,125,39)"/><text x="38.9616%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (392 samples, 0.21%)</title><rect x="38.8630%" y="309" width="0.2112%" height="15" fill="rgb(235,36,10)"/><text x="39.1130%" y="319.50"></text></g><g><title>&lt;T as runestick::from_value::UnsafeFromValue&gt;::from_value (962 samples, 0.52%)</title><rect x="38.5979%" y="325" width="0.5183%" height="15" fill="rgb(251,123,47)"/><text x="38.8479%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as runestick::to_value::ToValue&gt;::to_value (223 samples, 0.12%)</title><rect x="39.1485%" y="325" width="0.1201%" height="15" fill="rgb(221,13,13)"/><text x="39.3985%" y="335.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::new (209 samples, 0.11%)</title><rect x="39.1560%" y="309" width="0.1126%" height="15" fill="rgb(238,131,9)"/><text x="39.4060%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (200 samples, 0.11%)</title><rect x="39.1609%" y="293" width="0.1077%" height="15" fill="rgb(211,50,8)"/><text x="39.4109%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (187 samples, 0.10%)</title><rect x="39.1679%" y="277" width="0.1007%" height="15" fill="rgb(245,182,24)"/><text x="39.4179%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (187 samples, 0.10%)</title><rect x="39.1679%" y="261" width="0.1007%" height="15" fill="rgb(242,14,37)"/><text x="39.4179%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (187 samples, 0.10%)</title><rect x="39.1679%" y="245" width="0.1007%" height="15" fill="rgb(246,228,12)"/><text x="39.4179%" y="255.50"></text></g><g><title>alloc::alloc::alloc (187 samples, 0.10%)</title><rect x="39.1679%" y="229" width="0.1007%" height="15" fill="rgb(213,55,15)"/><text x="39.4179%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (283 samples, 0.15%)</title><rect x="39.5865%" y="229" width="0.1525%" height="15" fill="rgb(209,9,3)"/><text x="39.8365%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner::_{{closure}} (2,471 samples, 1.33%)</title><rect x="39.7389%" y="229" width="1.3312%" height="15" fill="rgb(230,59,30)"/><text x="39.9889%" y="239.50"></text></g><g><title>&lt;runestick::key::Key as core::cmp::PartialEq&gt;::eq (2,464 samples, 1.33%)</title><rect x="39.7427%" y="213" width="1.3274%" height="15" fill="rgb(209,121,21)"/><text x="39.9927%" y="223.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (4,021 samples, 2.17%)</title><rect x="41.0944%" y="197" width="2.1662%" height="15" fill="rgb(220,109,13)"/><text x="41.3444%" y="207.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4,021 samples, 2.17%)</title><rect x="41.0944%" y="181" width="2.1662%" height="15" fill="rgb(232,18,1)"/><text x="41.3444%" y="191.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,021 samples, 2.17%)</title><rect x="41.0944%" y="165" width="2.1662%" height="15" fill="rgb(215,41,42)"/><text x="41.3444%" y="175.50">c..</text></g><g><title>runestick::modules::collections::HashMap::get (7,289 samples, 3.93%)</title><rect x="39.3430%" y="309" width="3.9268%" height="15" fill="rgb(224,123,36)"/><text x="39.5930%" y="319.50">rune..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (7,110 samples, 3.83%)</title><rect x="39.4394%" y="293" width="3.8303%" height="15" fill="rgb(240,125,3)"/><text x="39.6894%" y="303.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (7,100 samples, 3.82%)</title><rect x="39.4448%" y="277" width="3.8249%" height="15" fill="rgb(205,98,50)"/><text x="39.6948%" y="287.50">hash..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (6,916 samples, 3.73%)</title><rect x="39.5439%" y="261" width="3.7258%" height="15" fill="rgb(205,185,37)"/><text x="39.7939%" y="271.50">hash..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (6,916 samples, 3.73%)</title><rect x="39.5439%" y="245" width="3.7258%" height="15" fill="rgb(238,207,15)"/><text x="39.7939%" y="255.50">hash..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::iter_hash (4,058 samples, 2.19%)</title><rect x="41.0836%" y="229" width="2.1861%" height="15" fill="rgb(213,199,42)"/><text x="41.3336%" y="239.50">h..</text></g><g><title>hashbrown::raw::inner::RawIterHash&lt;T&gt;::new (4,058 samples, 2.19%)</title><rect x="41.0836%" y="213" width="2.1861%" height="15" fill="rgb(235,201,11)"/><text x="41.3336%" y="223.50">h..</text></g><g><title>core::ops::function::Fn::call (7,338 samples, 3.95%)</title><rect x="39.3241%" y="325" width="3.9532%" height="15" fill="rgb(207,46,11)"/><text x="39.5741%" y="335.50">core..</text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,P)&gt;&gt;::fn_call (10,593 samples, 5.71%)</title><rect x="37.9622%" y="341" width="5.7067%" height="15" fill="rgb(241,35,35)"/><text x="38.2122%" y="351.50">&lt;Func a..</text></g><g><title>runestick::stack::Stack::push (540 samples, 0.29%)</title><rect x="43.3780%" y="325" width="0.2909%" height="15" fill="rgb(243,32,47)"/><text x="43.6280%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (537 samples, 0.29%)</title><rect x="43.3796%" y="309" width="0.2893%" height="15" fill="rgb(247,202,23)"/><text x="43.6296%" y="319.50"></text></g><g><title>core::ptr::write (490 samples, 0.26%)</title><rect x="43.4049%" y="293" width="0.2640%" height="15" fill="rgb(219,102,11)"/><text x="43.6549%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (234 samples, 0.13%)</title><rect x="43.6689%" y="341" width="0.1261%" height="15" fill="rgb(243,110,44)"/><text x="43.9189%" y="351.50"></text></g><g><title>runestick::runtime_context::RuntimeContext::lookup (689 samples, 0.37%)</title><rect x="43.8386%" y="341" width="0.3712%" height="15" fill="rgb(222,74,54)"/><text x="44.0886%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (689 samples, 0.37%)</title><rect x="43.8386%" y="325" width="0.3712%" height="15" fill="rgb(216,99,12)"/><text x="44.0886%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (689 samples, 0.37%)</title><rect x="43.8386%" y="309" width="0.3712%" height="15" fill="rgb(226,22,26)"/><text x="44.0886%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (557 samples, 0.30%)</title><rect x="43.9097%" y="293" width="0.3001%" height="15" fill="rgb(217,163,10)"/><text x="44.1597%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (557 samples, 0.30%)</title><rect x="43.9097%" y="277" width="0.3001%" height="15" fill="rgb(213,25,53)"/><text x="44.1597%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (210 samples, 0.11%)</title><rect x="44.2551%" y="293" width="0.1131%" height="15" fill="rgb(252,105,26)"/><text x="44.5051%" y="303.50"></text></g><g><title>runestick::unit::Unit::lookup (429 samples, 0.23%)</title><rect x="44.2540%" y="341" width="0.2311%" height="15" fill="rgb(220,39,43)"/><text x="44.5040%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (428 samples, 0.23%)</title><rect x="44.2545%" y="325" width="0.2306%" height="15" fill="rgb(229,68,48)"/><text x="44.5045%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (427 samples, 0.23%)</title><rect x="44.2551%" y="309" width="0.2300%" height="15" fill="rgb(252,8,32)"/><text x="44.5051%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (217 samples, 0.12%)</title><rect x="44.3682%" y="293" width="0.1169%" height="15" fill="rgb(223,20,43)"/><text x="44.6182%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (217 samples, 0.12%)</title><rect x="44.3682%" y="277" width="0.1169%" height="15" fill="rgb(229,81,49)"/><text x="44.6182%" y="287.50"></text></g><g><title>runestick::vm::Vm::op_call_instance (14,013 samples, 7.55%)</title><rect x="37.0459%" y="373" width="7.5491%" height="15" fill="rgb(236,28,36)"/><text x="37.2959%" y="383.50">runestick:..</text></g><g><title>runestick::vm::Vm::inner_op_call_instance (13,966 samples, 7.52%)</title><rect x="37.0712%" y="357" width="7.5238%" height="15" fill="rgb(249,185,26)"/><text x="37.3212%" y="367.50">runestick:..</text></g><g><title>runestick::stack::Stack::pop (349 samples, 0.19%)</title><rect x="44.7281%" y="357" width="0.1880%" height="15" fill="rgb(249,174,33)"/><text x="44.9781%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (258 samples, 0.14%)</title><rect x="44.7771%" y="341" width="0.1390%" height="15" fill="rgb(233,201,37)"/><text x="45.0271%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (228 samples, 0.12%)</title><rect x="45.1720%" y="261" width="0.1228%" height="15" fill="rgb(221,78,26)"/><text x="45.4220%" y="271.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (249 samples, 0.13%)</title><rect x="45.1720%" y="277" width="0.1341%" height="15" fill="rgb(250,127,30)"/><text x="45.4220%" y="287.50"></text></g><g><title>&lt;runestick::any_obj::AnyObj as core::ops::drop::Drop&gt;::drop (209 samples, 0.11%)</title><rect x="45.5658%" y="133" width="0.1126%" height="15" fill="rgb(230,49,44)"/><text x="45.8158%" y="143.50"></text></g><g><title>runestick::any_obj::drop_impl (209 samples, 0.11%)</title><rect x="45.5658%" y="117" width="0.1126%" height="15" fill="rgb(229,67,23)"/><text x="45.8158%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (209 samples, 0.11%)</title><rect x="45.5658%" y="101" width="0.1126%" height="15" fill="rgb(249,83,47)"/><text x="45.8158%" y="111.50"></text></g><g><title>core::ptr::drop_in_place (209 samples, 0.11%)</title><rect x="45.5658%" y="85" width="0.1126%" height="15" fill="rgb(215,43,3)"/><text x="45.8158%" y="95.50"></text></g><g><title>core::ptr::drop_in_place (209 samples, 0.11%)</title><rect x="45.5658%" y="69" width="0.1126%" height="15" fill="rgb(238,154,13)"/><text x="45.8158%" y="79.50"></text></g><g><title>core::ptr::drop_in_place (209 samples, 0.11%)</title><rect x="45.5658%" y="53" width="0.1126%" height="15" fill="rgb(219,56,2)"/><text x="45.8158%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (209 samples, 0.11%)</title><rect x="45.5658%" y="37" width="0.1126%" height="15" fill="rgb(233,0,4)"/><text x="45.8158%" y="47.50"></text></g><g><title>core::ptr::drop_in_place (381 samples, 0.21%)</title><rect x="45.5658%" y="197" width="0.2053%" height="15" fill="rgb(235,30,7)"/><text x="45.8158%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (381 samples, 0.21%)</title><rect x="45.5658%" y="181" width="0.2053%" height="15" fill="rgb(250,79,13)"/><text x="45.8158%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (381 samples, 0.21%)</title><rect x="45.5658%" y="165" width="0.2053%" height="15" fill="rgb(211,146,34)"/><text x="45.8158%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (381 samples, 0.21%)</title><rect x="45.5658%" y="149" width="0.2053%" height="15" fill="rgb(228,22,38)"/><text x="45.8158%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (710 samples, 0.38%)</title><rect x="45.3901%" y="261" width="0.3825%" height="15" fill="rgb(235,168,5)"/><text x="45.6401%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (409 samples, 0.22%)</title><rect x="45.5523%" y="245" width="0.2203%" height="15" fill="rgb(221,155,16)"/><text x="45.8023%" y="255.50"></text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (399 samples, 0.21%)</title><rect x="45.5577%" y="229" width="0.2150%" height="15" fill="rgb(215,215,53)"/><text x="45.8077%" y="239.50"></text></g><g><title>runestick::shared::SharedBox&lt;T&gt;::dec (393 samples, 0.21%)</title><rect x="45.5609%" y="213" width="0.2117%" height="15" fill="rgb(223,4,10)"/><text x="45.8109%" y="223.50"></text></g><g><title>core::mem::drop (903 samples, 0.49%)</title><rect x="45.3061%" y="277" width="0.4865%" height="15" fill="rgb(234,103,6)"/><text x="45.5561%" y="287.50"></text></g><g><title>core::mem::drop (1,451 samples, 0.78%)</title><rect x="45.0556%" y="325" width="0.7817%" height="15" fill="rgb(227,97,0)"/><text x="45.3056%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (1,451 samples, 0.78%)</title><rect x="45.0556%" y="309" width="0.7817%" height="15" fill="rgb(234,150,53)"/><text x="45.3056%" y="319.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,451 samples, 0.78%)</title><rect x="45.0556%" y="293" width="0.7817%" height="15" fill="rgb(228,201,54)"/><text x="45.3056%" y="303.50"></text></g><g><title>runestick::vm::Vm::op_clean (2,521 samples, 1.36%)</title><rect x="44.5950%" y="373" width="1.3581%" height="15" fill="rgb(222,22,37)"/><text x="44.8450%" y="383.50"></text></g><g><title>runestick::vm::Vm::op_popn (1,824 samples, 0.98%)</title><rect x="44.9705%" y="357" width="0.9826%" height="15" fill="rgb(237,53,32)"/><text x="45.2205%" y="367.50"></text></g><g><title>runestick::stack::Stack::popn (1,822 samples, 0.98%)</title><rect x="44.9716%" y="341" width="0.9816%" height="15" fill="rgb(233,25,53)"/><text x="45.2216%" y="351.50"></text></g><g><title>runestick::stack::Stack::drain_stack_top (215 samples, 0.12%)</title><rect x="45.8373%" y="325" width="0.1158%" height="15" fill="rgb(210,40,34)"/><text x="46.0873%" y="335.50"></text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::clone::Clone&gt;::clone (575 samples, 0.31%)</title><rect x="47.3640%" y="341" width="0.3098%" height="15" fill="rgb(241,220,44)"/><text x="47.6140%" y="351.50"></text></g><g><title>runestick::shared::SharedBox&lt;T&gt;::inc (510 samples, 0.27%)</title><rect x="47.3990%" y="325" width="0.2747%" height="15" fill="rgb(235,28,35)"/><text x="47.6490%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (217 samples, 0.12%)</title><rect x="47.5569%" y="309" width="0.1169%" height="15" fill="rgb(210,56,17)"/><text x="47.8069%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (217 samples, 0.12%)</title><rect x="47.5569%" y="293" width="0.1169%" height="15" fill="rgb(224,130,29)"/><text x="47.8069%" y="303.50"></text></g><g><title>core::mem::replace (217 samples, 0.12%)</title><rect x="47.5569%" y="277" width="0.1169%" height="15" fill="rgb(235,212,8)"/><text x="47.8069%" y="287.50"></text></g><g><title>core::mem::swap (217 samples, 0.12%)</title><rect x="47.5569%" y="261" width="0.1169%" height="15" fill="rgb(223,33,50)"/><text x="47.8069%" y="271.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (217 samples, 0.12%)</title><rect x="47.5569%" y="245" width="0.1169%" height="15" fill="rgb(219,149,13)"/><text x="47.8069%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (217 samples, 0.12%)</title><rect x="47.5569%" y="229" width="0.1169%" height="15" fill="rgb(250,156,29)"/><text x="47.8069%" y="239.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (3,188 samples, 1.72%)</title><rect x="45.9569%" y="357" width="1.7175%" height="15" fill="rgb(216,193,19)"/><text x="46.2069%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (498 samples, 0.27%)</title><rect x="47.7234%" y="341" width="0.2683%" height="15" fill="rgb(216,135,14)"/><text x="47.9734%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (498 samples, 0.27%)</title><rect x="47.7234%" y="325" width="0.2683%" height="15" fill="rgb(241,47,5)"/><text x="47.9734%" y="335.50"></text></g><g><title>runestick::stack::Stack::at_offset (1,096 samples, 0.59%)</title><rect x="47.6743%" y="357" width="0.5904%" height="15" fill="rgb(233,42,35)"/><text x="47.9243%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (507 samples, 0.27%)</title><rect x="47.9916%" y="341" width="0.2731%" height="15" fill="rgb(231,13,6)"/><text x="48.2416%" y="351.50"></text></g><g><title>runestick::stack::Stack::at_offset::_{{closure}} (380 samples, 0.20%)</title><rect x="48.0601%" y="325" width="0.2047%" height="15" fill="rgb(207,181,40)"/><text x="48.3101%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (380 samples, 0.20%)</title><rect x="48.0601%" y="309" width="0.2047%" height="15" fill="rgb(254,173,49)"/><text x="48.3101%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (380 samples, 0.20%)</title><rect x="48.0601%" y="293" width="0.2047%" height="15" fill="rgb(221,1,38)"/><text x="48.3101%" y="303.50"></text></g><g><title>runestick::vm::Vm::op_copy (5,090 samples, 2.74%)</title><rect x="45.9569%" y="373" width="2.7421%" height="15" fill="rgb(206,124,46)"/><text x="46.2069%" y="383.50">ru..</text></g><g><title>runestick::stack::Stack::push (806 samples, 0.43%)</title><rect x="48.2648%" y="357" width="0.4342%" height="15" fill="rgb(249,21,11)"/><text x="48.5148%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (264 samples, 0.14%)</title><rect x="48.5568%" y="341" width="0.1422%" height="15" fill="rgb(222,201,40)"/><text x="48.8068%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,227 samples, 0.66%)</title><rect x="49.9526%" y="357" width="0.6610%" height="15" fill="rgb(235,61,29)"/><text x="50.2026%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (195 samples, 0.11%)</title><rect x="50.6136%" y="357" width="0.1051%" height="15" fill="rgb(219,207,3)"/><text x="50.8636%" y="367.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (747 samples, 0.40%)</title><rect x="50.7623%" y="341" width="0.4024%" height="15" fill="rgb(222,56,46)"/><text x="51.0123%" y="351.50"></text></g><g><title>runestick::stack::Stack::at_offset (192 samples, 0.10%)</title><rect x="51.1647%" y="341" width="0.1034%" height="15" fill="rgb(239,76,54)"/><text x="51.4147%" y="351.50"></text></g><g><title>runestick::stack::Stack::address (1,021 samples, 0.55%)</title><rect x="50.7187%" y="357" width="0.5500%" height="15" fill="rgb(231,124,27)"/><text x="50.9687%" y="367.50"></text></g><g><title>runestick::stack::Stack::address_ref (352 samples, 0.19%)</title><rect x="51.2687%" y="357" width="0.1896%" height="15" fill="rgb(249,195,6)"/><text x="51.5187%" y="367.50"></text></g><g><title>runestick::stack::Stack::push (249 samples, 0.13%)</title><rect x="51.4583%" y="357" width="0.1341%" height="15" fill="rgb(237,174,47)"/><text x="51.7083%" y="367.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (6,318 samples, 3.40%)</title><rect x="51.9135%" y="341" width="3.4037%" height="15" fill="rgb(206,201,31)"/><text x="52.1635%" y="351.50">cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (6,318 samples, 3.40%)</title><rect x="51.9135%" y="325" width="3.4037%" height="15" fill="rgb(231,57,52)"/><text x="52.1635%" y="335.50">cor..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::_{{closure}} (6,317 samples, 3.40%)</title><rect x="51.9141%" y="309" width="3.4031%" height="15" fill="rgb(248,177,22)"/><text x="52.1641%" y="319.50">cor..</text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (6,235 samples, 3.36%)</title><rect x="51.9583%" y="293" width="3.3589%" height="15" fill="rgb(215,211,37)"/><text x="52.2083%" y="303.50">&lt;ru..</text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::clone::Clone&gt;::clone (914 samples, 0.49%)</title><rect x="54.8248%" y="277" width="0.4924%" height="15" fill="rgb(241,128,51)"/><text x="55.0748%" y="287.50"></text></g><g><title>runestick::shared::SharedBox&lt;T&gt;::inc (888 samples, 0.48%)</title><rect x="54.8388%" y="261" width="0.4784%" height="15" fill="rgb(227,165,31)"/><text x="55.0888%" y="271.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::borrow_ref (206 samples, 0.11%)</title><rect x="55.3172%" y="341" width="0.1110%" height="15" fill="rgb(228,167,24)"/><text x="55.5672%" y="351.50"></text></g><g><title>runestick::access::Access::shared (202 samples, 0.11%)</title><rect x="55.3194%" y="325" width="0.1088%" height="15" fill="rgb(228,143,12)"/><text x="55.5694%" y="335.50"></text></g><g><title>runestick::vm::Vm::op_index_get (12,576 samples, 6.77%)</title><rect x="48.7071%" y="373" width="6.7750%" height="15" fill="rgb(249,149,8)"/><text x="48.9571%" y="383.50">runestick..</text></g><g><title>runestick::vm::Vm::try_tuple_like_index_get (7,220 samples, 3.89%)</title><rect x="51.5925%" y="357" width="3.8896%" height="15" fill="rgb(243,35,44)"/><text x="51.8425%" y="367.50">rune..</text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (1,390 samples, 0.75%)</title><rect x="56.1258%" y="357" width="0.7488%" height="15" fill="rgb(246,89,9)"/><text x="56.3758%" y="367.50"></text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::clone::Clone&gt;::clone (1,165 samples, 0.63%)</title><rect x="56.2470%" y="341" width="0.6276%" height="15" fill="rgb(233,213,13)"/><text x="56.4970%" y="351.50"></text></g><g><title>runestick::shared::SharedBox&lt;T&gt;::inc (610 samples, 0.33%)</title><rect x="56.5460%" y="325" width="0.3286%" height="15" fill="rgb(233,141,41)"/><text x="56.7960%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (190 samples, 0.10%)</title><rect x="56.7723%" y="309" width="0.1024%" height="15" fill="rgb(239,167,4)"/><text x="57.0223%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (190 samples, 0.10%)</title><rect x="56.7723%" y="293" width="0.1024%" height="15" fill="rgb(209,217,16)"/><text x="57.0223%" y="303.50"></text></g><g><title>core::mem::replace (190 samples, 0.10%)</title><rect x="56.7723%" y="277" width="0.1024%" height="15" fill="rgb(219,88,35)"/><text x="57.0223%" y="287.50"></text></g><g><title>core::mem::swap (190 samples, 0.10%)</title><rect x="56.7723%" y="261" width="0.1024%" height="15" fill="rgb(220,193,23)"/><text x="57.0223%" y="271.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (190 samples, 0.10%)</title><rect x="56.7723%" y="245" width="0.1024%" height="15" fill="rgb(230,90,52)"/><text x="57.0223%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (190 samples, 0.10%)</title><rect x="56.7723%" y="229" width="0.1024%" height="15" fill="rgb(252,106,19)"/><text x="57.0223%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (960 samples, 0.52%)</title><rect x="56.9657%" y="357" width="0.5172%" height="15" fill="rgb(206,74,20)"/><text x="57.2157%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (413 samples, 0.22%)</title><rect x="57.2604%" y="341" width="0.2225%" height="15" fill="rgb(230,138,44)"/><text x="57.5104%" y="351.50"></text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (413 samples, 0.22%)</title><rect x="57.2604%" y="325" width="0.2225%" height="15" fill="rgb(235,182,43)"/><text x="57.5104%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (317 samples, 0.17%)</title><rect x="58.0060%" y="325" width="0.1708%" height="15" fill="rgb(242,16,51)"/><text x="58.2560%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (317 samples, 0.17%)</title><rect x="58.0060%" y="309" width="0.1708%" height="15" fill="rgb(248,9,4)"/><text x="58.2560%" y="319.50"></text></g><g><title>runestick::stack::Stack::pop (1,214 samples, 0.65%)</title><rect x="57.5351%" y="357" width="0.6540%" height="15" fill="rgb(210,31,22)"/><text x="57.7851%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (1,043 samples, 0.56%)</title><rect x="57.6272%" y="341" width="0.5619%" height="15" fill="rgb(239,54,39)"/><text x="57.8772%" y="351.50"></text></g><g><title>&lt;T as runestick::to_value::UnsafeToValue&gt;::unsafe_to_value (584 samples, 0.31%)</title><rect x="58.8658%" y="325" width="0.3146%" height="15" fill="rgb(230,99,41)"/><text x="59.1158%" y="335.50"></text></g><g><title>&lt;&amp;runestick::value::Value as runestick::to_value::ToValue&gt;::to_value (584 samples, 0.31%)</title><rect x="58.8658%" y="309" width="0.3146%" height="15" fill="rgb(253,106,12)"/><text x="59.1158%" y="319.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (584 samples, 0.31%)</title><rect x="58.8658%" y="293" width="0.3146%" height="15" fill="rgb(213,46,41)"/><text x="59.1158%" y="303.50"></text></g><g><title>&lt;(O,P) as runestick::guarded_args::GuardedArgs&gt;::unsafe_into_stack (3,391 samples, 1.83%)</title><rect x="58.3960%" y="341" width="1.8268%" height="15" fill="rgb(215,133,35)"/><text x="58.6460%" y="351.50">&lt;..</text></g><g><title>runestick::stack::Stack::push (1,935 samples, 1.04%)</title><rect x="59.1804%" y="325" width="1.0424%" height="15" fill="rgb(213,28,5)"/><text x="59.4304%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1,788 samples, 0.96%)</title><rect x="59.2596%" y="309" width="0.9632%" height="15" fill="rgb(215,77,49)"/><text x="59.5096%" y="319.50"></text></g><g><title>core::ptr::write (1,713 samples, 0.92%)</title><rect x="59.3000%" y="293" width="0.9228%" height="15" fill="rgb(248,100,22)"/><text x="59.5500%" y="303.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (390 samples, 0.21%)</title><rect x="60.2228%" y="341" width="0.2101%" height="15" fill="rgb(208,67,9)"/><text x="60.4728%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (193 samples, 0.10%)</title><rect x="60.4329%" y="341" width="0.1040%" height="15" fill="rgb(219,133,21)"/><text x="60.6829%" y="351.50"></text></g><g><title>runestick::stack::Stack::push (1,307 samples, 0.70%)</title><rect x="60.5821%" y="341" width="0.7041%" height="15" fill="rgb(246,46,29)"/><text x="60.8321%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1,242 samples, 0.67%)</title><rect x="60.6172%" y="325" width="0.6691%" height="15" fill="rgb(246,185,52)"/><text x="60.8672%" y="335.50"></text></g><g><title>core::ptr::write (1,080 samples, 0.58%)</title><rect x="60.7044%" y="309" width="0.5818%" height="15" fill="rgb(252,136,11)"/><text x="60.9544%" y="319.50"></text></g><g><title>runestick::value::Value::type_hash (463 samples, 0.25%)</title><rect x="61.2863%" y="341" width="0.2494%" height="15" fill="rgb(219,138,53)"/><text x="61.5363%" y="351.50"></text></g><g><title>&lt;&amp;mut runestick::modules::collections::HashMap as runestick::from_value::UnsafeFromValue&gt;::from_value (499 samples, 0.27%)</title><rect x="63.1863%" y="309" width="0.2688%" height="15" fill="rgb(211,51,23)"/><text x="63.4363%" y="319.50"></text></g><g><title>runestick::value::Value::into_any_mut (441 samples, 0.24%)</title><rect x="63.2176%" y="293" width="0.2376%" height="15" fill="rgb(247,221,28)"/><text x="63.4676%" y="303.50"></text></g><g><title>runestick::shared::Shared&lt;runestick::any_obj::AnyObj&gt;::internal_downcast_into_mut (203 samples, 0.11%)</title><rect x="63.3458%" y="277" width="0.1094%" height="15" fill="rgb(251,222,45)"/><text x="63.5958%" y="287.50"></text></g><g><title>&lt;&amp;mut runestick::vec::Vec as runestick::from_value::UnsafeFromValue&gt;::from_value (845 samples, 0.46%)</title><rect x="63.4552%" y="309" width="0.4552%" height="15" fill="rgb(217,162,53)"/><text x="63.7052%" y="319.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::into_mut (550 samples, 0.30%)</title><rect x="63.6141%" y="293" width="0.2963%" height="15" fill="rgb(229,93,14)"/><text x="63.8641%" y="303.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::internal_into_mut (550 samples, 0.30%)</title><rect x="63.6141%" y="277" width="0.2963%" height="15" fill="rgb(209,67,49)"/><text x="63.8641%" y="287.50"></text></g><g><title>runestick::access::Access::exclusive (550 samples, 0.30%)</title><rect x="63.6141%" y="261" width="0.2963%" height="15" fill="rgb(213,87,29)"/><text x="63.8641%" y="271.50"></text></g><g><title>&lt;T as runestick::from_value::UnsafeFromValue&gt;::from_value (732 samples, 0.39%)</title><rect x="63.9104%" y="309" width="0.3943%" height="15" fill="rgb(205,151,52)"/><text x="64.1604%" y="319.50"></text></g><g><title>&lt;usize as runestick::from_value::FromValue&gt;::from_value (414 samples, 0.22%)</title><rect x="64.0817%" y="293" width="0.2230%" height="15" fill="rgb(253,215,39)"/><text x="64.3317%" y="303.50"></text></g><g><title>runestick::value::Value::into_integer (309 samples, 0.17%)</title><rect x="64.1383%" y="277" width="0.1665%" height="15" fill="rgb(221,220,41)"/><text x="64.3883%" y="287.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 0.13%)</title><rect x="64.3047%" y="309" width="0.1309%" height="15" fill="rgb(218,133,21)"/><text x="64.5547%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (189 samples, 0.10%)</title><rect x="64.3338%" y="293" width="0.1018%" height="15" fill="rgb(221,193,43)"/><text x="64.5838%" y="303.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (189 samples, 0.10%)</title><rect x="64.3338%" y="277" width="0.1018%" height="15" fill="rgb(240,128,52)"/><text x="64.5838%" y="287.50"></text></g><g><title>core::ptr::read (189 samples, 0.10%)</title><rect x="64.3338%" y="261" width="0.1018%" height="15" fill="rgb(253,114,12)"/><text x="64.5838%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (189 samples, 0.10%)</title><rect x="64.3338%" y="245" width="0.1018%" height="15" fill="rgb(215,223,47)"/><text x="64.5838%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as runestick::to_value::ToValue&gt;::to_value (209 samples, 0.11%)</title><rect x="64.4356%" y="309" width="0.1126%" height="15" fill="rgb(248,225,23)"/><text x="64.6856%" y="319.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::new (201 samples, 0.11%)</title><rect x="64.4399%" y="293" width="0.1083%" height="15" fill="rgb(250,108,0)"/><text x="64.6899%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (195 samples, 0.11%)</title><rect x="64.4432%" y="277" width="0.1051%" height="15" fill="rgb(228,208,7)"/><text x="64.6932%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (187 samples, 0.10%)</title><rect x="64.4475%" y="261" width="0.1007%" height="15" fill="rgb(244,45,10)"/><text x="64.6975%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (187 samples, 0.10%)</title><rect x="64.4475%" y="245" width="0.1007%" height="15" fill="rgb(207,125,25)"/><text x="64.6975%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (187 samples, 0.10%)</title><rect x="64.4475%" y="229" width="0.1007%" height="15" fill="rgb(210,195,18)"/><text x="64.6975%" y="239.50"></text></g><g><title>alloc::alloc::alloc (187 samples, 0.10%)</title><rect x="64.4475%" y="213" width="0.1007%" height="15" fill="rgb(249,80,12)"/><text x="64.6975%" y="223.50"></text></g><g><title>core::mem::drop (379 samples, 0.20%)</title><rect x="64.5493%" y="309" width="0.2042%" height="15" fill="rgb(221,65,9)"/><text x="64.7993%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (379 samples, 0.20%)</title><rect x="64.5493%" y="293" width="0.2042%" height="15" fill="rgb(235,49,36)"/><text x="64.7993%" y="303.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (379 samples, 0.20%)</title><rect x="64.5493%" y="277" width="0.2042%" height="15" fill="rgb(225,32,20)"/><text x="64.7993%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (353 samples, 0.19%)</title><rect x="64.5633%" y="261" width="0.1902%" height="15" fill="rgb(215,141,46)"/><text x="64.8133%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (353 samples, 0.19%)</title><rect x="64.5633%" y="245" width="0.1902%" height="15" fill="rgb(250,160,47)"/><text x="64.8133%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get_mut (338 samples, 0.18%)</title><rect x="65.0277%" y="261" width="0.1821%" height="15" fill="rgb(216,222,40)"/><text x="65.2777%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (338 samples, 0.18%)</title><rect x="65.0277%" y="245" width="0.1821%" height="15" fill="rgb(234,217,39)"/><text x="65.2777%" y="255.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1,016 samples, 0.55%)</title><rect x="65.2249%" y="245" width="0.5473%" height="15" fill="rgb(207,178,40)"/><text x="65.4749%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,016 samples, 0.55%)</title><rect x="65.2249%" y="229" width="0.5473%" height="15" fill="rgb(221,136,13)"/><text x="65.4749%" y="239.50"></text></g><g><title>core::ptr::write (1,016 samples, 0.55%)</title><rect x="65.2249%" y="213" width="0.5473%" height="15" fill="rgb(249,199,10)"/><text x="65.4749%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (445 samples, 0.24%)</title><rect x="65.8476%" y="197" width="0.2397%" height="15" fill="rgb(249,222,13)"/><text x="66.0976%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (445 samples, 0.24%)</title><rect x="65.8476%" y="181" width="0.2397%" height="15" fill="rgb(244,185,38)"/><text x="66.0976%" y="191.50"></text></g><g><title>&lt;runestick::key::Key as core::hash::Hash&gt;::hash (329 samples, 0.18%)</title><rect x="65.9101%" y="165" width="0.1772%" height="15" fill="rgb(236,202,9)"/><text x="66.1601%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (574 samples, 0.31%)</title><rect x="66.0981%" y="181" width="0.3092%" height="15" fill="rgb(250,229,37)"/><text x="66.3481%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (574 samples, 0.31%)</title><rect x="66.0981%" y="165" width="0.3092%" height="15" fill="rgb(206,174,23)"/><text x="66.3481%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (393 samples, 0.21%)</title><rect x="66.1956%" y="149" width="0.2117%" height="15" fill="rgb(211,33,43)"/><text x="66.4456%" y="159.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::copy_from_nonoverlapping (575 samples, 0.31%)</title><rect x="66.0981%" y="197" width="0.3098%" height="15" fill="rgb(245,58,50)"/><text x="66.3481%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find_insert_slot (213 samples, 0.11%)</title><rect x="66.4144%" y="197" width="0.1147%" height="15" fill="rgb(244,68,36)"/><text x="66.6644%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::reserve (1,343 samples, 0.72%)</title><rect x="65.8212%" y="245" width="0.7235%" height="15" fill="rgb(232,229,15)"/><text x="66.0712%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::reserve_rehash (1,343 samples, 0.72%)</title><rect x="65.8212%" y="229" width="0.7235%" height="15" fill="rgb(254,30,23)"/><text x="66.0712%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::resize (1,343 samples, 0.72%)</title><rect x="65.8212%" y="213" width="0.7235%" height="15" fill="rgb(235,160,14)"/><text x="66.0712%" y="223.50"></text></g><g><title>runestick::modules::collections::HashMap::insert (3,334 samples, 1.80%)</title><rect x="64.7535%" y="293" width="1.7961%" height="15" fill="rgb(212,155,44)"/><text x="65.0035%" y="303.50">r..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (3,109 samples, 1.67%)</title><rect x="64.8747%" y="277" width="1.6749%" height="15" fill="rgb(226,2,50)"/><text x="65.1247%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::insert (2,487 samples, 1.34%)</title><rect x="65.2098%" y="261" width="1.3398%" height="15" fill="rgb(234,177,6)"/><text x="65.4598%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (336 samples, 0.18%)</title><rect x="66.7408%" y="277" width="0.1810%" height="15" fill="rgb(217,24,9)"/><text x="66.9908%" y="287.50"></text></g><g><title>core::ops::function::Fn::call (4,082 samples, 2.20%)</title><rect x="64.7535%" y="309" width="2.1991%" height="15" fill="rgb(220,13,46)"/><text x="65.0035%" y="319.50">c..</text></g><g><title>runestick::vec::Vec::set (748 samples, 0.40%)</title><rect x="66.5496%" y="293" width="0.4030%" height="15" fill="rgb(239,221,27)"/><text x="66.7996%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (410 samples, 0.22%)</title><rect x="66.9816%" y="309" width="0.2209%" height="15" fill="rgb(222,198,25)"/><text x="67.2316%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (410 samples, 0.22%)</title><rect x="66.9816%" y="293" width="0.2209%" height="15" fill="rgb(211,99,13)"/><text x="67.2316%" y="303.50"></text></g><g><title>&lt;runestick::shared::RawDrop as core::ops::drop::Drop&gt;::drop (248 samples, 0.13%)</title><rect x="67.0689%" y="277" width="0.1336%" height="15" fill="rgb(232,111,31)"/><text x="67.3189%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::drain (207 samples, 0.11%)</title><rect x="67.2370%" y="293" width="0.1115%" height="15" fill="rgb(245,82,37)"/><text x="67.4870%" y="303.50"></text></g><g><title>runestick::stack::Stack::drain_stack_top (295 samples, 0.16%)</title><rect x="67.2025%" y="309" width="0.1589%" height="15" fill="rgb(227,149,46)"/><text x="67.4525%" y="319.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,O,P)&gt;&gt;::fn_call (11,622 samples, 6.26%)</title><rect x="61.6860%" y="325" width="6.2610%" height="15" fill="rgb(218,36,50)"/><text x="61.9360%" y="335.50">&lt;Func as..</text></g><g><title>runestick::stack::Stack::push (1,087 samples, 0.59%)</title><rect x="67.3614%" y="309" width="0.5856%" height="15" fill="rgb(226,80,48)"/><text x="67.6114%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1,025 samples, 0.55%)</title><rect x="67.3948%" y="293" width="0.5522%" height="15" fill="rgb(238,224,15)"/><text x="67.6448%" y="303.50"></text></g><g><title>core::ptr::write (881 samples, 0.47%)</title><rect x="67.4724%" y="277" width="0.4746%" height="15" fill="rgb(241,136,10)"/><text x="67.7224%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (209 samples, 0.11%)</title><rect x="68.1377%" y="261" width="0.1126%" height="15" fill="rgb(208,32,45)"/><text x="68.3877%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (303 samples, 0.16%)</title><rect x="68.1377%" y="277" width="0.1632%" height="15" fill="rgb(207,135,9)"/><text x="68.3877%" y="287.50"></text></g><g><title>runestick::runtime_context::RuntimeContext::lookup (927 samples, 0.50%)</title><rect x="68.1377%" y="325" width="0.4994%" height="15" fill="rgb(206,86,44)"/><text x="68.3877%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (927 samples, 0.50%)</title><rect x="68.1377%" y="309" width="0.4994%" height="15" fill="rgb(245,177,15)"/><text x="68.3877%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (927 samples, 0.50%)</title><rect x="68.1377%" y="293" width="0.4994%" height="15" fill="rgb(206,64,50)"/><text x="68.3877%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (624 samples, 0.34%)</title><rect x="68.3010%" y="277" width="0.3362%" height="15" fill="rgb(234,36,40)"/><text x="68.5510%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (624 samples, 0.34%)</title><rect x="68.3010%" y="261" width="0.3362%" height="15" fill="rgb(213,64,8)"/><text x="68.5510%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::iter_hash (241 samples, 0.13%)</title><rect x="68.5073%" y="245" width="0.1298%" height="15" fill="rgb(210,75,36)"/><text x="68.7573%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawIterHash&lt;T&gt;::new (241 samples, 0.13%)</title><rect x="68.5073%" y="229" width="0.1298%" height="15" fill="rgb(229,88,21)"/><text x="68.7573%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (221 samples, 0.12%)</title><rect x="68.6371%" y="261" width="0.1191%" height="15" fill="rgb(252,204,47)"/><text x="68.8871%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (375 samples, 0.20%)</title><rect x="68.6371%" y="277" width="0.2020%" height="15" fill="rgb(208,77,27)"/><text x="68.8871%" y="287.50"></text></g><g><title>runestick::vm::Vm::op_index_set (25,340 samples, 13.65%)</title><rect x="55.4820%" y="373" width="13.6513%" height="15" fill="rgb(221,76,26)"/><text x="55.7320%" y="383.50">runestick::vm::Vm::op..</text></g><g><title>runestick::vm::Vm::call_instance_fn (20,315 samples, 10.94%)</title><rect x="58.1891%" y="357" width="10.9442%" height="15" fill="rgb(225,139,18)"/><text x="58.4391%" y="367.50">runestick::vm::V..</text></g><g><title>runestick::vm::Vm::inner_call_instance_fn (14,103 samples, 7.60%)</title><rect x="61.5357%" y="341" width="7.5976%" height="15" fill="rgb(230,137,11)"/><text x="61.7857%" y="351.50">runestick:..</text></g><g><title>runestick::unit::Unit::lookup (921 samples, 0.50%)</title><rect x="68.6371%" y="325" width="0.4962%" height="15" fill="rgb(212,28,1)"/><text x="68.8871%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (921 samples, 0.50%)</title><rect x="68.6371%" y="309" width="0.4962%" height="15" fill="rgb(248,164,17)"/><text x="68.8871%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (921 samples, 0.50%)</title><rect x="68.6371%" y="293" width="0.4962%" height="15" fill="rgb(222,171,42)"/><text x="68.8871%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (546 samples, 0.29%)</title><rect x="68.8392%" y="277" width="0.2941%" height="15" fill="rgb(243,84,45)"/><text x="69.0892%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (546 samples, 0.29%)</title><rect x="68.8392%" y="261" width="0.2941%" height="15" fill="rgb(252,49,23)"/><text x="69.0892%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::iter_hash (266 samples, 0.14%)</title><rect x="68.9900%" y="245" width="0.1433%" height="15" fill="rgb(215,19,7)"/><text x="69.2400%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawIterHash&lt;T&gt;::new (266 samples, 0.14%)</title><rect x="68.9900%" y="229" width="0.1433%" height="15" fill="rgb(238,81,41)"/><text x="69.2400%" y="239.50"></text></g><g><title>__GI___libc_free (257 samples, 0.14%)</title><rect x="69.4775%" y="357" width="0.1385%" height="15" fill="rgb(210,199,37)"/><text x="69.7275%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (219 samples, 0.12%)</title><rect x="69.6375%" y="357" width="0.1180%" height="15" fill="rgb(244,192,49)"/><text x="69.8875%" y="367.50"></text></g><g><title>runestick::vm::Vm::op_iter_next (1,204 samples, 0.65%)</title><rect x="69.1333%" y="373" width="0.6486%" height="15" fill="rgb(226,211,11)"/><text x="69.3833%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (210 samples, 0.11%)</title><rect x="70.6584%" y="325" width="0.1131%" height="15" fill="rgb(236,162,54)"/><text x="70.9084%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (210 samples, 0.11%)</title><rect x="70.6584%" y="309" width="0.1131%" height="15" fill="rgb(220,229,9)"/><text x="70.9084%" y="319.50"></text></g><g><title>runestick::stack::Stack::pop (894 samples, 0.48%)</title><rect x="70.2948%" y="357" width="0.4816%" height="15" fill="rgb(250,87,22)"/><text x="70.5448%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (657 samples, 0.35%)</title><rect x="70.4225%" y="341" width="0.3539%" height="15" fill="rgb(239,43,17)"/><text x="70.6725%" y="351.50"></text></g><g><title>runestick::value::Value::into_bool (1,153 samples, 0.62%)</title><rect x="70.7764%" y="357" width="0.6211%" height="15" fill="rgb(231,177,25)"/><text x="71.0264%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (455 samples, 0.25%)</title><rect x="71.1524%" y="341" width="0.2451%" height="15" fill="rgb(219,179,1)"/><text x="71.4024%" y="351.50"></text></g><g><title>runestick::vm::Vm::op_jump_if (3,120 samples, 1.68%)</title><rect x="69.7819%" y="373" width="1.6808%" height="15" fill="rgb(238,219,53)"/><text x="70.0319%" y="383.50"></text></g><g><title>runestick::stack::Stack::push (540 samples, 0.29%)</title><rect x="71.7450%" y="357" width="0.2909%" height="15" fill="rgb(232,167,36)"/><text x="71.9950%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (465 samples, 0.25%)</title><rect x="71.7854%" y="341" width="0.2505%" height="15" fill="rgb(244,19,51)"/><text x="72.0354%" y="351.50"></text></g><g><title>core::ptr::write (420 samples, 0.23%)</title><rect x="71.8097%" y="325" width="0.2263%" height="15" fill="rgb(224,6,22)"/><text x="72.0597%" y="335.50"></text></g><g><title>runestick::vm::Vm::op_match_sequence (1,308 samples, 0.70%)</title><rect x="71.5414%" y="373" width="0.7047%" height="15" fill="rgb(224,145,5)"/><text x="71.7914%" y="383.50"></text></g><g><title>runestick::vm::Vm::on_tuple (390 samples, 0.21%)</title><rect x="72.0359%" y="357" width="0.2101%" height="15" fill="rgb(234,130,49)"/><text x="72.2859%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (219 samples, 0.12%)</title><rect x="72.3091%" y="357" width="0.1180%" height="15" fill="rgb(254,6,2)"/><text x="72.5591%" y="367.50"></text></g><g><title>runestick::stack::Stack::push (332 samples, 0.18%)</title><rect x="72.5036%" y="357" width="0.1789%" height="15" fill="rgb(208,96,46)"/><text x="72.7536%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (293 samples, 0.16%)</title><rect x="72.5246%" y="341" width="0.1578%" height="15" fill="rgb(239,3,39)"/><text x="72.7746%" y="351.50"></text></g><g><title>core::ptr::write (276 samples, 0.15%)</title><rect x="72.5337%" y="325" width="0.1487%" height="15" fill="rgb(233,210,1)"/><text x="72.7837%" y="335.50"></text></g><g><title>runestick::shared::Shared&lt;T&gt;::borrow_ref (250 samples, 0.13%)</title><rect x="72.8209%" y="341" width="0.1347%" height="15" fill="rgb(244,137,37)"/><text x="73.0709%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (224 samples, 0.12%)</title><rect x="73.0913%" y="229" width="0.1207%" height="15" fill="rgb(240,136,2)"/><text x="73.3413%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (505 samples, 0.27%)</title><rect x="73.0126%" y="277" width="0.2721%" height="15" fill="rgb(239,18,37)"/><text x="73.2626%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (396 samples, 0.21%)</title><rect x="73.0714%" y="261" width="0.2133%" height="15" fill="rgb(218,185,22)"/><text x="73.3214%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (372 samples, 0.20%)</title><rect x="73.0843%" y="245" width="0.2004%" height="15" fill="rgb(225,218,4)"/><text x="73.3343%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner::_{{closure}} (417 samples, 0.22%)</title><rect x="73.3887%" y="245" width="0.2246%" height="15" fill="rgb(230,182,32)"/><text x="73.6387%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (417 samples, 0.22%)</title><rect x="73.3887%" y="229" width="0.2246%" height="15" fill="rgb(242,56,43)"/><text x="73.6387%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (399 samples, 0.21%)</title><rect x="73.3984%" y="213" width="0.2150%" height="15" fill="rgb(233,99,24)"/><text x="73.6484%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (399 samples, 0.21%)</title><rect x="73.3984%" y="197" width="0.2150%" height="15" fill="rgb(234,209,42)"/><text x="73.6484%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (399 samples, 0.21%)</title><rect x="73.3984%" y="181" width="0.2150%" height="15" fill="rgb(227,7,12)"/><text x="73.6484%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (399 samples, 0.21%)</title><rect x="73.3984%" y="165" width="0.2150%" height="15" fill="rgb(245,203,43)"/><text x="73.6484%" y="175.50"></text></g><g><title>__memcmp_avx2_movbe (224 samples, 0.12%)</title><rect x="73.4927%" y="149" width="0.1207%" height="15" fill="rgb(238,205,33)"/><text x="73.7427%" y="159.50"></text></g><g><title>runestick::vm::Vm::op_object_index_get (2,698 samples, 1.45%)</title><rect x="72.2460%" y="373" width="1.4535%" height="15" fill="rgb(231,56,7)"/><text x="72.4960%" y="383.50"></text></g><g><title>runestick::vm::Vm::try_object_slot_index_get (1,881 samples, 1.01%)</title><rect x="72.6862%" y="357" width="1.0133%" height="15" fill="rgb(244,186,29)"/><text x="72.9362%" y="367.50"></text></g><g><title>runestick::value::Struct::get (1,304 samples, 0.70%)</title><rect x="72.9970%" y="341" width="0.7025%" height="15" fill="rgb(234,111,31)"/><text x="73.2470%" y="351.50"></text></g><g><title>runestick::object::Object::get (1,300 samples, 0.70%)</title><rect x="72.9992%" y="325" width="0.7003%" height="15" fill="rgb(241,149,10)"/><text x="73.2492%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,300 samples, 0.70%)</title><rect x="72.9992%" y="309" width="0.7003%" height="15" fill="rgb(249,206,44)"/><text x="73.2492%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_inner (1,275 samples, 0.69%)</title><rect x="73.0126%" y="293" width="0.6869%" height="15" fill="rgb(251,153,30)"/><text x="73.2626%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (770 samples, 0.41%)</title><rect x="73.2847%" y="277" width="0.4148%" height="15" fill="rgb(239,152,38)"/><text x="73.5347%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (770 samples, 0.41%)</title><rect x="73.2847%" y="261" width="0.4148%" height="15" fill="rgb(249,139,47)"/><text x="73.5347%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (793 samples, 0.43%)</title><rect x="76.9890%" y="341" width="0.4272%" height="15" fill="rgb(244,64,35)"/><text x="77.2390%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (760 samples, 0.41%)</title><rect x="77.0067%" y="325" width="0.4094%" height="15" fill="rgb(216,46,15)"/><text x="77.2567%" y="335.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (1,437 samples, 0.77%)</title><rect x="77.5557%" y="325" width="0.7741%" height="15" fill="rgb(250,74,19)"/><text x="77.8057%" y="335.50"></text></g><g><title>runestick::stack::Stack::at_offset (630 samples, 0.34%)</title><rect x="78.3304%" y="325" width="0.3394%" height="15" fill="rgb(249,42,33)"/><text x="78.5804%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (535 samples, 0.29%)</title><rect x="78.3816%" y="309" width="0.2882%" height="15" fill="rgb(242,149,17)"/><text x="78.6316%" y="319.50"></text></g><g><title>runestick::stack::Stack::at_offset::_{{closure}} (535 samples, 0.29%)</title><rect x="78.3816%" y="293" width="0.2882%" height="15" fill="rgb(244,29,21)"/><text x="78.6316%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (535 samples, 0.29%)</title><rect x="78.3816%" y="277" width="0.2882%" height="15" fill="rgb(220,130,37)"/><text x="78.6316%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (535 samples, 0.29%)</title><rect x="78.3816%" y="261" width="0.2882%" height="15" fill="rgb(211,67,2)"/><text x="78.6316%" y="271.50"></text></g><g><title>runestick::stack::Stack::address (2,561 samples, 1.38%)</title><rect x="77.4162%" y="341" width="1.3797%" height="15" fill="rgb(235,68,52)"/><text x="77.6662%" y="351.50"></text></g><g><title>runestick::stack::Stack::pop (234 samples, 0.13%)</title><rect x="78.6698%" y="325" width="0.1261%" height="15" fill="rgb(246,142,3)"/><text x="78.9198%" y="335.50"></text></g><g><title>&lt;runestick::value::Value as core::convert::From&lt;bool&gt;&gt;::from (219 samples, 0.12%)</title><rect x="78.9343%" y="325" width="0.1180%" height="15" fill="rgb(241,25,7)"/><text x="79.1843%" y="335.50"></text></g><g><title>runestick::value::Value::Bool (219 samples, 0.12%)</title><rect x="78.9343%" y="309" width="0.1180%" height="15" fill="rgb(242,119,39)"/><text x="79.1843%" y="319.50"></text></g><g><title>runestick::vm::Vm::internal_boolean_ops (12,526 samples, 6.75%)</title><rect x="74.3999%" y="357" width="6.7480%" height="15" fill="rgb(241,98,45)"/><text x="74.6499%" y="367.50">runestick..</text></g><g><title>runestick::stack::Stack::push (4,366 samples, 2.35%)</title><rect x="78.7958%" y="341" width="2.3521%" height="15" fill="rgb(254,28,30)"/><text x="79.0458%" y="351.50">r..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3,890 samples, 2.10%)</title><rect x="79.0523%" y="325" width="2.0956%" height="15" fill="rgb(241,142,54)"/><text x="79.3023%" y="335.50">a..</text></g><g><title>core::ptr::write (3,491 samples, 1.88%)</title><rect x="79.2672%" y="309" width="1.8807%" height="15" fill="rgb(222,85,15)"/><text x="79.5172%" y="319.50">c..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (435 samples, 0.23%)</title><rect x="84.3727%" y="341" width="0.2343%" height="15" fill="rgb(210,85,47)"/><text x="84.6227%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (591 samples, 0.32%)</title><rect x="84.6787%" y="341" width="0.3184%" height="15" fill="rgb(224,206,25)"/><text x="84.9287%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (445 samples, 0.24%)</title><rect x="84.7574%" y="325" width="0.2397%" height="15" fill="rgb(243,201,19)"/><text x="85.0074%" y="335.50"></text></g><g><title>&lt;runestick::value::Value as core::clone::Clone&gt;::clone (904 samples, 0.49%)</title><rect x="85.1420%" y="325" width="0.4870%" height="15" fill="rgb(236,59,4)"/><text x="85.3920%" y="335.50"></text></g><g><title>runestick::stack::Stack::at_offset (224 samples, 0.12%)</title><rect x="85.6290%" y="325" width="0.1207%" height="15" fill="rgb(254,179,45)"/><text x="85.8790%" y="335.50"></text></g><g><title>runestick::stack::Stack::address (1,560 samples, 0.84%)</title><rect x="84.9971%" y="341" width="0.8404%" height="15" fill="rgb(226,14,10)"/><text x="85.2471%" y="351.50"></text></g><g><title>runestick::vm::Vm::op_op (22,662 samples, 12.21%)</title><rect x="73.6995%" y="373" width="12.2086%" height="15" fill="rgb(244,27,41)"/><text x="73.9495%" y="383.50">runestick::vm::Vm:..</text></g><g><title>runestick::vm::Vm::internal_num (8,824 samples, 4.75%)</title><rect x="81.1544%" y="357" width="4.7537%" height="15" fill="rgb(235,35,32)"/><text x="81.4044%" y="367.50">runest..</text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (285 samples, 0.15%)</title><rect x="86.0745%" y="357" width="0.1535%" height="15" fill="rgb(218,68,31)"/><text x="86.3245%" y="367.50"></text></g><g><title>runestick::vm::Vm::op_pop (1,179 samples, 0.64%)</title><rect x="85.9081%" y="373" width="0.6352%" height="15" fill="rgb(207,120,37)"/><text x="86.1581%" y="383.50"></text></g><g><title>runestick::stack::Stack::pop (415 samples, 0.22%)</title><rect x="86.3197%" y="357" width="0.2236%" height="15" fill="rgb(227,98,0)"/><text x="86.5697%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (314 samples, 0.17%)</title><rect x="86.3741%" y="341" width="0.1692%" height="15" fill="rgb(207,7,3)"/><text x="86.6241%" y="351.50"></text></g><g><title>runestick::vm::Vm::op_pop_and_jump_if_not (444 samples, 0.24%)</title><rect x="86.5432%" y="373" width="0.2392%" height="15" fill="rgb(206,98,19)"/><text x="86.7932%" y="383.50"></text></g><g><title>core::mem::drop (479 samples, 0.26%)</title><rect x="86.8282%" y="293" width="0.2580%" height="15" fill="rgb(217,5,26)"/><text x="87.0782%" y="303.50"></text></g><g><title>core::mem::drop (557 samples, 0.30%)</title><rect x="86.7883%" y="341" width="0.3001%" height="15" fill="rgb(235,190,38)"/><text x="87.0383%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (557 samples, 0.30%)</title><rect x="86.7883%" y="325" width="0.3001%" height="15" fill="rgb(247,86,24)"/><text x="87.0383%" y="335.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (557 samples, 0.30%)</title><rect x="86.7883%" y="309" width="0.3001%" height="15" fill="rgb(205,101,16)"/><text x="87.0383%" y="319.50"></text></g><g><title>runestick::vm::Vm::op_popn (587 samples, 0.32%)</title><rect x="86.7824%" y="373" width="0.3162%" height="15" fill="rgb(246,168,33)"/><text x="87.0324%" y="383.50"></text></g><g><title>runestick::stack::Stack::popn (582 samples, 0.31%)</title><rect x="86.7851%" y="357" width="0.3135%" height="15" fill="rgb(231,114,1)"/><text x="87.0351%" y="367.50"></text></g><g><title>runestick::inst::InstValue::into_value (413 samples, 0.22%)</title><rect x="87.3168%" y="357" width="0.2225%" height="15" fill="rgb(207,184,53)"/><text x="87.5668%" y="367.50"></text></g><g><title>runestick::vm::Vm::op_push (1,263 samples, 0.68%)</title><rect x="87.0987%" y="373" width="0.6804%" height="15" fill="rgb(224,95,51)"/><text x="87.3487%" y="383.50"></text></g><g><title>runestick::stack::Stack::push (445 samples, 0.24%)</title><rect x="87.5393%" y="357" width="0.2397%" height="15" fill="rgb(212,188,45)"/><text x="87.7893%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (262 samples, 0.14%)</title><rect x="87.6379%" y="341" width="0.1411%" height="15" fill="rgb(223,154,38)"/><text x="87.8879%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,583 samples, 0.85%)</title><rect x="88.0452%" y="325" width="0.8528%" height="15" fill="rgb(251,22,52)"/><text x="88.2952%" y="335.50"></text></g><g><title>core::mem::swap (1,584 samples, 0.85%)</title><rect x="88.0452%" y="357" width="0.8533%" height="15" fill="rgb(229,209,22)"/><text x="88.2952%" y="367.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1,584 samples, 0.85%)</title><rect x="88.0452%" y="341" width="0.8533%" height="15" fill="rgb(234,138,34)"/><text x="88.2952%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (188 samples, 0.10%)</title><rect x="88.8985%" y="357" width="0.1013%" height="15" fill="rgb(212,95,11)"/><text x="89.1485%" y="367.50"></text></g><g><title>runestick::vm::Vm::op_replace (2,741 samples, 1.48%)</title><rect x="87.7844%" y="373" width="1.4766%" height="15" fill="rgb(240,179,47)"/><text x="88.0344%" y="383.50"></text></g><g><title>runestick::stack::Stack::pop (478 samples, 0.26%)</title><rect x="89.0036%" y="357" width="0.2575%" height="15" fill="rgb(240,163,11)"/><text x="89.2536%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (353 samples, 0.19%)</title><rect x="89.0709%" y="341" width="0.1902%" height="15" fill="rgb(236,37,12)"/><text x="89.3209%" y="351.50"></text></g><g><title>runestick::vm::Vm::op_tuple_index_get_at (394 samples, 0.21%)</title><rect x="89.3225%" y="373" width="0.2123%" height="15" fill="rgb(232,164,16)"/><text x="89.5725%" y="383.50"></text></g><g><title>runestick::vm::Vm::try_tuple_like_index_get (199 samples, 0.11%)</title><rect x="89.4276%" y="357" width="0.1072%" height="15" fill="rgb(244,205,15)"/><text x="89.6776%" y="367.50"></text></g><g><title>runestick::vm::Vm::op_tuple_n (470 samples, 0.25%)</title><rect x="89.5348%" y="373" width="0.2532%" height="15" fill="rgb(223,117,47)"/><text x="89.7848%" y="383.50"></text></g><g><title>aoc_2020_rune::ScriptEngine::run_day (159,304 samples, 85.82%)</title><rect x="3.9704%" y="661" width="85.8208%" height="15" fill="rgb(244,107,35)"/><text x="4.2204%" y="671.50">aoc_2020_rune::ScriptEngine::run_day</text></g><g><title>tokio::runtime::Runtime::block_on (159,304 samples, 85.82%)</title><rect x="3.9704%" y="645" width="85.8208%" height="15" fill="rgb(205,140,8)"/><text x="4.2204%" y="655.50">tokio::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::handle::Handle::enter (159,304 samples, 85.82%)</title><rect x="3.9704%" y="629" width="85.8208%" height="15" fill="rgb(228,84,46)"/><text x="4.2204%" y="639.50">tokio::runtime::handle::Handle::enter</text></g><g><title>tokio::runtime::context::enter (159,304 samples, 85.82%)</title><rect x="3.9704%" y="613" width="85.8208%" height="15" fill="rgb(254,188,9)"/><text x="4.2204%" y="623.50">tokio::runtime::context::enter</text></g><g><title>tokio::runtime::Runtime::block_on::_{{closure}} (159,304 samples, 85.82%)</title><rect x="3.9704%" y="597" width="85.8208%" height="15" fill="rgb(206,112,54)"/><text x="4.2204%" y="607.50">tokio::runtime::Runtime::block_on::_{{closure}}</text></g><g><title>tokio::runtime::shell::Shell::block_on (159,304 samples, 85.82%)</title><rect x="3.9704%" y="581" width="85.8208%" height="15" fill="rgb(216,84,49)"/><text x="4.2204%" y="591.50">tokio::runtime::shell::Shell::block_on</text></g><g><title>tokio::coop::budget (159,298 samples, 85.82%)</title><rect x="3.9736%" y="565" width="85.8176%" height="15" fill="rgb(214,194,35)"/><text x="4.2236%" y="575.50">tokio::coop::budget</text></g><g><title>tokio::coop::with_budget (159,298 samples, 85.82%)</title><rect x="3.9736%" y="549" width="85.8176%" height="15" fill="rgb(249,28,3)"/><text x="4.2236%" y="559.50">tokio::coop::with_budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (159,298 samples, 85.82%)</title><rect x="3.9736%" y="533" width="85.8176%" height="15" fill="rgb(222,56,52)"/><text x="4.2236%" y="543.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (159,298 samples, 85.82%)</title><rect x="3.9736%" y="517" width="85.8176%" height="15" fill="rgb(245,217,50)"/><text x="4.2236%" y="527.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::coop::with_budget::_{{closure}} (159,298 samples, 85.82%)</title><rect x="3.9736%" y="501" width="85.8176%" height="15" fill="rgb(213,201,24)"/><text x="4.2236%" y="511.50">tokio::coop::with_budget::_{{closure}}</text></g><g><title>tokio::runtime::shell::Shell::block_on::_{{closure}} (159,298 samples, 85.82%)</title><rect x="3.9736%" y="485" width="85.8176%" height="15" fill="rgb(248,116,28)"/><text x="4.2236%" y="495.50">tokio::runtime::shell::Shell::block_on::_{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (159,298 samples, 85.82%)</title><rect x="3.9736%" y="469" width="85.8176%" height="15" fill="rgb(219,72,43)"/><text x="4.2236%" y="479.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>runestick::vm_execution::VmExecution::async_complete::_{{closure}} (159,298 samples, 85.82%)</title><rect x="3.9736%" y="453" width="85.8176%" height="15" fill="rgb(209,138,14)"/><text x="4.2236%" y="463.50">runestick::vm_execution::VmExecution::async_complete::_{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (159,298 samples, 85.82%)</title><rect x="3.9736%" y="437" width="85.8176%" height="15" fill="rgb(222,18,33)"/><text x="4.2236%" y="447.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>runestick::vm_execution::VmExecution::async_resume::_{{closure}} (159,298 samples, 85.82%)</title><rect x="3.9736%" y="421" width="85.8176%" height="15" fill="rgb(213,199,7)"/><text x="4.2236%" y="431.50">runestick::vm_execution::VmExecution::async_resume::_{{closure}}</text></g><g><title>runestick::vm_execution::VmExecution::run (159,278 samples, 85.81%)</title><rect x="3.9844%" y="405" width="85.8068%" height="15" fill="rgb(250,110,10)"/><text x="4.2344%" y="415.50">runestick::vm_execution::VmExecution::run</text></g><g><title>runestick::vm::Vm::run (159,278 samples, 85.81%)</title><rect x="3.9844%" y="389" width="85.8068%" height="15" fill="rgb(248,123,6)"/><text x="4.2344%" y="399.50">runestick::vm::Vm::run</text></g><g><title>aoc_2020_rune::main (159,305 samples, 85.82%)</title><rect x="3.9704%" y="693" width="85.8213%" height="15" fill="rgb(206,91,31)"/><text x="4.2204%" y="703.50">aoc_2020_rune::main</text></g><g><title>aoc_2020_rune::bench (159,305 samples, 85.82%)</title><rect x="3.9704%" y="677" width="85.8213%" height="15" fill="rgb(211,154,13)"/><text x="4.2204%" y="687.50">aoc_2020_rune::bench</text></g><g><title>core::ops::function::FnOnce::call_once (252 samples, 0.14%)</title><rect x="89.8009%" y="693" width="0.1358%" height="15" fill="rgb(225,148,7)"/><text x="90.0509%" y="703.50"></text></g><g><title>&lt;runestick::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (193 samples, 0.10%)</title><rect x="92.1212%" y="661" width="0.1040%" height="15" fill="rgb(220,160,43)"/><text x="92.3712%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (289 samples, 0.16%)</title><rect x="92.0727%" y="677" width="0.1557%" height="15" fill="rgb(213,52,39)"/><text x="92.3227%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (4,374 samples, 2.36%)</title><rect x="89.9366%" y="693" width="2.3564%" height="15" fill="rgb(243,137,7)"/><text x="90.1866%" y="703.50">c..</text></g><g><title>runestick::budget::take (2,012 samples, 1.08%)</title><rect x="92.4498%" y="693" width="1.0839%" height="15" fill="rgb(230,79,13)"/><text x="92.6998%" y="703.50"></text></g><g><title>runestick::shared::SharedBox&lt;T&gt;::dec (905 samples, 0.49%)</title><rect x="93.8343%" y="693" width="0.4875%" height="15" fill="rgb(247,105,23)"/><text x="94.0843%" y="703.50"></text></g><g><title>runestick::value::Value::into_bool (553 samples, 0.30%)</title><rect x="94.4177%" y="693" width="0.2979%" height="15" fill="rgb(223,179,41)"/><text x="94.6677%" y="703.50"></text></g><g><title>runestick::value::Value::type_hash (302 samples, 0.16%)</title><rect x="94.7997%" y="693" width="0.1627%" height="15" fill="rgb(218,9,34)"/><text x="95.0497%" y="703.50"></text></g><g><title>runestick::vec::Vec::set (197 samples, 0.11%)</title><rect x="94.9629%" y="693" width="0.1061%" height="15" fill="rgb(222,106,8)"/><text x="95.2129%" y="703.50"></text></g><g><title>runestick::vm::Vm::inner_call_instance_fn (450 samples, 0.24%)</title><rect x="95.0836%" y="693" width="0.2424%" height="15" fill="rgb(211,220,0)"/><text x="95.3336%" y="703.50"></text></g><g><title>runestick::vm::Vm::inner_op_call_instance (255 samples, 0.14%)</title><rect x="95.3260%" y="693" width="0.1374%" height="15" fill="rgb(229,52,16)"/><text x="95.5760%" y="703.50"></text></g><g><title>runestick::vm::Vm::internal_boolean_ops (666 samples, 0.36%)</title><rect x="95.4634%" y="693" width="0.3588%" height="15" fill="rgb(212,155,18)"/><text x="95.7134%" y="703.50"></text></g><g><title>runestick::vm::Vm::internal_num (237 samples, 0.13%)</title><rect x="95.8233%" y="693" width="0.1277%" height="15" fill="rgb(242,21,14)"/><text x="96.0733%" y="703.50"></text></g><g><title>runestick::vm::Vm::internal_num_assign (344 samples, 0.19%)</title><rect x="95.9510%" y="693" width="0.1853%" height="15" fill="rgb(222,19,48)"/><text x="96.2010%" y="703.50"></text></g><g><title>runestick::vm::Vm::op_call (216 samples, 0.12%)</title><rect x="96.1363%" y="693" width="0.1164%" height="15" fill="rgb(232,45,27)"/><text x="96.3863%" y="703.50"></text></g><g><title>runestick::vm::Vm::op_index_get (259 samples, 0.14%)</title><rect x="97.2493%" y="677" width="0.1395%" height="15" fill="rgb(249,103,42)"/><text x="97.4993%" y="687.50"></text></g><g><title>runestick::vm::Vm::op_index_set (509 samples, 0.27%)</title><rect x="97.3888%" y="677" width="0.2742%" height="15" fill="rgb(246,81,33)"/><text x="97.6388%" y="687.50"></text></g><g><title>runestick::vm::Vm::call_instance_fn (255 samples, 0.14%)</title><rect x="97.5256%" y="661" width="0.1374%" height="15" fill="rgb(252,33,42)"/><text x="97.7756%" y="671.50"></text></g><g><title>runestick::vm::Vm::op_op (713 samples, 0.38%)</title><rect x="97.6991%" y="677" width="0.3841%" height="15" fill="rgb(209,212,41)"/><text x="97.9491%" y="687.50"></text></g><g><title>runestick::vm::Vm::run (3,615 samples, 1.95%)</title><rect x="96.2580%" y="693" width="1.9475%" height="15" fill="rgb(207,154,6)"/><text x="96.5080%" y="703.50">r..</text></g><g><title>runestick::vm::Vm::try_tuple_like_index_get (379 samples, 0.20%)</title><rect x="98.2637%" y="693" width="0.2042%" height="15" fill="rgb(223,64,47)"/><text x="98.5137%" y="703.50"></text></g><g><title>&lt;Func as runestick::module::InstFn&lt;(Instance,)&gt;&gt;::fn_call (220 samples, 0.12%)</title><rect x="98.4846%" y="421" width="0.1185%" height="15" fill="rgb(211,161,38)"/><text x="98.7346%" y="431.50"></text></g><g><title>core::ops::function::Fn::call (220 samples, 0.12%)</title><rect x="98.4846%" y="405" width="0.1185%" height="15" fill="rgb(219,138,40)"/><text x="98.7346%" y="415.50"></text></g><g><title>runestick::modules::iter::collect_vec (198 samples, 0.11%)</title><rect x="98.4964%" y="389" width="0.1067%" height="15" fill="rgb(241,228,46)"/><text x="98.7464%" y="399.50"></text></g><g><title>runestick::iterator::Iterator::collect (198 samples, 0.11%)</title><rect x="98.4964%" y="373" width="0.1067%" height="15" fill="rgb(223,209,38)"/><text x="98.7464%" y="383.50"></text></g><g><title>runestick::iterator::Iterator::next (198 samples, 0.11%)</title><rect x="98.4964%" y="357" width="0.1067%" height="15" fill="rgb(236,164,45)"/><text x="98.7464%" y="367.50"></text></g><g><title>&lt;runestick::iterator::IterRepr as runestick::iterator::RuneIterator&gt;::next (198 samples, 0.11%)</title><rect x="98.4964%" y="341" width="0.1067%" height="15" fill="rgb(231,15,5)"/><text x="98.7464%" y="351.50"></text></g><g><title>&lt;runestick::iterator::Map&lt;I&gt; as runestick::iterator::RuneIterator&gt;::next (198 samples, 0.11%)</title><rect x="98.4964%" y="325" width="0.1067%" height="15" fill="rgb(252,35,15)"/><text x="98.7464%" y="335.50"></text></g><g><title>tokio::runtime::context::enter (251 samples, 0.14%)</title><rect x="98.4765%" y="693" width="0.1352%" height="15" fill="rgb(248,181,18)"/><text x="98.7265%" y="703.50"></text></g><g><title>tokio::runtime::Runtime::block_on::_{{closure}} (251 samples, 0.14%)</title><rect x="98.4765%" y="677" width="0.1352%" height="15" fill="rgb(233,39,42)"/><text x="98.7265%" y="687.50"></text></g><g><title>tokio::runtime::shell::Shell::block_on (251 samples, 0.14%)</title><rect x="98.4765%" y="661" width="0.1352%" height="15" fill="rgb(238,110,33)"/><text x="98.7265%" y="671.50"></text></g><g><title>tokio::coop::budget (251 samples, 0.14%)</title><rect x="98.4765%" y="645" width="0.1352%" height="15" fill="rgb(233,195,10)"/><text x="98.7265%" y="655.50"></text></g><g><title>tokio::coop::with_budget (251 samples, 0.14%)</title><rect x="98.4765%" y="629" width="0.1352%" height="15" fill="rgb(254,105,3)"/><text x="98.7265%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (251 samples, 0.14%)</title><rect x="98.4765%" y="613" width="0.1352%" height="15" fill="rgb(221,225,9)"/><text x="98.7265%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (251 samples, 0.14%)</title><rect x="98.4765%" y="597" width="0.1352%" height="15" fill="rgb(224,227,45)"/><text x="98.7265%" y="607.50"></text></g><g><title>tokio::coop::with_budget::_{{closure}} (251 samples, 0.14%)</title><rect x="98.4765%" y="581" width="0.1352%" height="15" fill="rgb(229,198,43)"/><text x="98.7265%" y="591.50"></text></g><g><title>tokio::runtime::shell::Shell::block_on::_{{closure}} (251 samples, 0.14%)</title><rect x="98.4765%" y="565" width="0.1352%" height="15" fill="rgb(206,209,35)"/><text x="98.7265%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (251 samples, 0.14%)</title><rect x="98.4765%" y="549" width="0.1352%" height="15" fill="rgb(245,195,53)"/><text x="98.7265%" y="559.50"></text></g><g><title>runestick::vm_execution::VmExecution::async_complete::_{{closure}} (251 samples, 0.14%)</title><rect x="98.4765%" y="533" width="0.1352%" height="15" fill="rgb(240,92,26)"/><text x="98.7265%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (251 samples, 0.14%)</title><rect x="98.4765%" y="517" width="0.1352%" height="15" fill="rgb(207,40,23)"/><text x="98.7265%" y="527.50"></text></g><g><title>runestick::vm_execution::VmExecution::async_resume::_{{closure}} (251 samples, 0.14%)</title><rect x="98.4765%" y="501" width="0.1352%" height="15" fill="rgb(223,111,35)"/><text x="98.7265%" y="511.50"></text></g><g><title>runestick::vm_execution::VmExecution::run (251 samples, 0.14%)</title><rect x="98.4765%" y="485" width="0.1352%" height="15" fill="rgb(229,147,28)"/><text x="98.7265%" y="495.50"></text></g><g><title>runestick::vm::Vm::run (251 samples, 0.14%)</title><rect x="98.4765%" y="469" width="0.1352%" height="15" fill="rgb(211,29,28)"/><text x="98.7265%" y="479.50"></text></g><g><title>runestick::vm::Vm::op_call_instance (236 samples, 0.13%)</title><rect x="98.4846%" y="453" width="0.1271%" height="15" fill="rgb(228,72,33)"/><text x="98.7346%" y="463.50"></text></g><g><title>runestick::vm::Vm::inner_op_call_instance (236 samples, 0.13%)</title><rect x="98.4846%" y="437" width="0.1271%" height="15" fill="rgb(205,214,31)"/><text x="98.7346%" y="447.50"></text></g><g><title>[unknown] (181,074 samples, 97.55%)</title><rect x="1.0941%" y="709" width="97.5488%" height="15" fill="rgb(224,111,15)"/><text x="1.3441%" y="719.50">[unknown]</text></g><g><title>core::ptr::drop_in_place (696 samples, 0.37%)</title><rect x="98.6623%" y="709" width="0.3750%" height="15" fill="rgb(253,21,26)"/><text x="98.9123%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (393 samples, 0.21%)</title><rect x="99.3627%" y="693" width="0.2117%" height="15" fill="rgb(245,139,43)"/><text x="99.6127%" y="703.50"></text></g><g><title>runestick::vm::Vm::internal_boolean_ops (1,023 samples, 0.55%)</title><rect x="99.0949%" y="709" width="0.5511%" height="15" fill="rgb(252,170,7)"/><text x="99.3449%" y="719.50"></text></g><g><title>runestick::vm::Vm::internal_num (488 samples, 0.26%)</title><rect x="99.6461%" y="709" width="0.2629%" height="15" fill="rgb(231,118,14)"/><text x="99.8961%" y="719.50"></text></g><g><title>aoc-2020-rune (185,536 samples, 99.95%)</title><rect x="0.0000%" y="725" width="99.9526%" height="15" fill="rgb(238,83,0)"/><text x="0.2500%" y="735.50">aoc-2020-rune</text></g><g><title>all (185,624 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(221,39,39)"/><text x="0.2500%" y="751.50"></text></g></svg></svg>