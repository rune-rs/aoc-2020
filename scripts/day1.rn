use crate::utils::{iter, read_file};

fn filter_inner(items) {
    while let Some(i) = items.next() {
        if i.iter().sum() == 2020 {
            return i.iter().product();
        }
    }
}

#[test]
fn test_part1()
{
    let lines = [
        1721,
        979,
        366,
        299,
        675,
        1456
    ];

    lines.sort_int();
    assert_eq!(filter_inner(iter::all_pairs(lines)), 514579);
}

#[test]
fn test_part2()
{
    let lines = [
        1721,
        979,
        366,
        299,
        675,
        1456
    ];

    lines.sort_int();
    assert_eq!(filter_inner(iter::all_triples(lines)), 241861950);
}


pub async fn run() {
    test_part1;
    test_part2;

    let lines = read_file("inputs/day1.txt")
        .await?
        .filter(|v| v != "")
        .map(|v| std::string::parse_int(v).expect("invalid number"))
        .collect_vec();

    lines.sort_int();
    (filter_inner(iter::all_pairs(lines)), filter_inner(iter::all_triples(lines)))

}

// -*- mode: rust; -*-
