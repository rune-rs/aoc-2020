use fs::read_to_string;
use std::iter::range;

pub(crate) mod iter {
    pub fn all_pairs(data) {
       let count = data.len();
       for i in 0..count {
           let a = data[i];
           for j in (i+1)..count {
                yield [a, data[j]]
           }
       }
    }

    pub fn all_triples(data) {
       let count = data.len();
       for i in 0..count {
           let a = data[i];
           for j in (i + 1)..count {
               let b = data[j];
               for k in (j+1)..count {
                  yield [a, b, data[k]]
               }
           }
       }
    }

    pub fn batching(it, func) {
        (|| {
            while let Some(v) = func(it) {
                yield v
            }
        })().iter()
    }

    pub fn batch_by_lines(it) {
        batching(it, |it| {
            let v = [];
            loop {
                match it.next() {
                    None => { return  if v.len() != 0 { Some(v) } else { None }; },
                    Some(x) => { if x == "" {  return Some(v); } else { v.push(x); } }
                }
            }
        })
    }
}

pub async fn read_file(s) {
    Ok(read_to_string(s)
        .await?
        .split('\n'))
}
// -*- mode: rust; -*-
